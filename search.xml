<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Flutter 3. Project Dicee</title>
      <link href="/2020/02/22/Flutter-Project-Dicee/"/>
      <url>/2020/02/22/Flutter-Project-Dicee/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天，我们来聊聊<code>Stateless</code>和<code>Stateless</code>两种插件，顾名思义，是根据他们的状态来决定的，让我们通过一个Project来理解一下吧。</p><a id="more"></a><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>首先去github克隆一下我们需要用的一个repo，里面包含了我们需要用的图片：<code>https://github.com/londonappbrewery/dicee-flutter</code></p><p>克隆完毕，运行一下我们的模拟器，显示如下图即为成功。</p><p><img src="/2020/02/22/Flutter-Project-Dicee/image-20200222193534515.png" alt="image-20200222193534515"></p><p><img src="/2020/02/22/Flutter-Project-Dicee/image-20200222193731619.png" alt="image-20200222193731619"></p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>打开main.dart文件，我们看到<code>body</code>是一个StatelessWidget类似于我们之前创建的那些，它给我们提供了这个关键的构建方法，它会在每次点击Save或点击Hot Reload按钮时刷新自身。</p><p><img src="/2020/02/22/Flutter-Project-Dicee/image-20200222193948162.png" alt="image-20200222193948162"></p><p>另外，在<code>images</code>文件夹里也已存放好之后我们需要用到的骰子图片。</p><p><img src="/2020/02/22/Flutter-Project-Dicee/image-20200222194520143.png" alt="image-20200222194520143"></p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>如果这时我们将body改成一个<code>Row</code>的组件，并插入一张上面的图片，我们会发现这种图片溢出整个屏幕了，也就是说这个图片太大了，那么我们如何将这个图片<u>自适应</u>到屏幕呢？</p><p><img src="/2020/02/22/Flutter-Project-Dicee/image-20200222194617716.png" alt="image-20200222194617716"></p><h2 id="Expanded-组件"><a href="#Expanded-组件" class="headerlink" title="Expanded 组件"></a>Expanded 组件</h2><p>我们需要用到<a href="https://api.flutter.dev/flutter/widgets/Expanded-class.html" target="_blank" rel="noopener">Expanded</a>组件</p><blockquote><p>Flutter 文档上说It will expand to fill the available space along the main axis，也就是填充主轴的可用空间，如果是<code>Row</code>组件，就会水平的扩充；如果是<code>Column</code>,就会竖直的扩充。</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DicePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Row(</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        Expanded(</span><br><span class="line">          child: Image(</span><br><span class="line">            image: AssetImage(<span class="string">'images/dice1.png'</span>),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/02/22/Flutter-Project-Dicee/image-20200222195553989.png" alt="image-20200222195553989"></p><h2 id="flex-属性"><a href="#flex-属性" class="headerlink" title="flex 属性"></a>flex 属性</h2><p>如果我们再加一个骰子，它们就会平均占用水平的空间。此时如果在<code>Expanded</code>组件中增加一个属性<code>flex</code>,如果给左边的骰子赋值为2，右边为1，则会将水平空间按三等分，左边占2/3的空间，右边占1/3空间。<img src="/2020/02/22/Flutter-Project-Dicee/image-20200222200055016.png" alt="image-20200222200055016"></p><h2 id="Image-asset-构造函数"><a href="#Image-asset-构造函数" class="headerlink" title="Image.asset() 构造函数"></a>Image.asset() 构造函数</h2><blockquote><p>浏览<a href="https://api.flutter.dev/flutter/widgets/Image-class.html" target="_blank" rel="noopener">Flutter 文档</a>，可以发现，有构造函数直接传图片参数即可完成图片的加载，缩短代码！</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">child: Image.asset(<span class="string">'images/dice1.png'</span>),</span><br></pre></td></tr></table></figure><h2 id="Button-组件"><a href="#Button-组件" class="headerlink" title="Button 组件"></a>Button 组件</h2><blockquote><p>想要了解Button详情，可以进入对应的文档页-&gt;<a href="https://flutter.dev/docs/development/ui/widgets/material#Buttons" target="_blank" rel="noopener">Material Components widgets</a></p></blockquote><p>如果这个时候我们想要加入Button</p><p>我们选择FlatButton组件。</p><h3 id="FlatButton-组件"><a href="#FlatButton-组件" class="headerlink" title="FlatButton 组件"></a>FlatButton 组件</h3><p>这时我们可以运用最下方快捷键中的<code>Alt + Enter</code>快速创建一个widget，写上FlatButton。此时我们运行一下，发现该按钮会小一点，如下图所示。猜测可能是这个组件自带内边距，那我们如何debug呢？</p><p><img src="/2020/02/22/Flutter-Project-Dicee/image-20200222202729624.png" alt="image-20200222202729624"></p><h3 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h3><p>点击右侧栏中的<code>Flutter Inspector</code>,以及上方有一个<code>Debug Paint</code> (显示组件的布局信息). 点击<code>FlatButton</code>，然后在下方出现的消息栏中输入<code>padding</code>，可以发现<code>Padding</code>的左右内间距设为了16，哦~原来问题出在这！</p><p>所以，有时候发现布局的问题，不妨点击右侧栏的信息来找bug。</p><p><img src="/2020/02/22/Flutter-Project-Dicee/image-20200222202921373.png" alt="image-20200222202921373"></p><p>这时该组件还有一个<code>onPressed</code>的方法需要定义，查看文档，这是个<code>VoidCallback</code>类型的方法。</p><blockquote><p>Signature of callbacks that have no arguments and return no data. 没有参数且不返回数据的回调的签名。</p></blockquote><p>简单来说，就是匿名函数。</p><p>如果我们想要一次性地改变图片的名字，但是却不每次去修改传入的图片名称，该怎么办呢？</p><h1 id="Stateless-vs-Stateful"><a href="#Stateless-vs-Stateful" class="headerlink" title="Stateless vs Stateful"></a>Stateless vs Stateful</h1><blockquote><p>大家应该注意到，我们刚才默认使用的组件是<code>Stateless</code>的，它的意思就是说该组件是不会变化的</p></blockquote><h2 id="Dollar-Sign"><a href="#Dollar-Sign" class="headerlink" title="Dollar Sign $"></a>Dollar Sign $</h2><blockquote><p>用于在字符串中引用变量，用法如下：</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DicePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> leftDiceNumber = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: Row(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          Expanded(</span><br><span class="line">            child: FlatButton(</span><br><span class="line">              child: Image.asset(<span class="string">'images/dice<span class="subst">$leftDiceNumber</span>.png'</span>),</span><br><span class="line">              onPressed: () &#123;</span><br><span class="line">              &#125;,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">         ), ], ), ); &#125; &#125;</span><br></pre></td></tr></table></figure><h2 id="Stateful-组件初尝试"><a href="#Stateful-组件初尝试" class="headerlink" title="Stateful 组件初尝试"></a>Stateful 组件初尝试</h2><p>如果我们想要点击按钮，改变骰子图片，就要用到<code>Stateful</code>组件。</p><p>快捷输入是<code>stful</code>，再加回车。这时我们将下方函数里的内容替换成我们刚才使用的的即可，别忘了删除之前的Stateless组件。</p><p>Tip: <code>Stateless</code>的快捷输入是<code>stless</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _State createState() =&gt; _State();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_State</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改变后的代码如下</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_DicePageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">DicePage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> leftDiceNumber = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: Row(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          Expanded(</span><br><span class="line">            child: FlatButton(</span><br><span class="line">              child: Image.asset(<span class="string">'images/dice<span class="subst">$leftDiceNumber</span>.png'</span>),</span><br><span class="line">              onPressed: () &#123;</span><br><span class="line">                <span class="comment">//setState(() &#123;</span></span><br><span class="line">                  leftDiceNumber = <span class="number">5</span>;</span><br><span class="line">                <span class="comment">//&#125;);</span></span><br><span class="line">              &#125;,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          Expanded(</span><br><span class="line">            child: FlatButton(</span><br><span class="line">              child: Image.asset(<span class="string">'images/dice1.png'</span>),</span><br><span class="line">              onPressed: () &#123;&#125;,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到我注释的地方，如果我注释掉那两行代码，那么当我点击左侧按钮时，尽管<code>leftDiceNumber</code>变量会更新被替换成5，但是图片将不回更新。方法介绍如下</p><h2 id="setState-method"><a href="#setState-method" class="headerlink" title="setState() method"></a><code>setState()</code> method</h2><blockquote><p>如果该方法里的<u>变量</u>改变了，那么在该变量被用到的地方就会<strong>标记上</strong>，然后进行更新。</p></blockquote><p>如果我们想要随机改变点击按钮后的图片呢？哈哈，我们可以适用Random()，但是前提需要引入数学库~</p><h1 id="import-Math-library"><a href="#import-Math-library" class="headerlink" title="import Math library"></a>import Math library</h1><p>Check here <a href="https://api.flutter.dev/flutter/dart-math/dart-math-library.html" target="_blank" rel="noopener">Dart math library</a></p><p>在main.dart开头引入<code>import &#39;dart:math&#39;;</code></p><p><code>Random()</code>里有个方法<code>nextInt(max)</code>，用法是随机获得一个<u>整数</u>，范围是在0~max之间（不包括max）,如果max是6，则结果会是0~5之间的任意整数。</p><p>那我们该怎么做去获得1~6呢？对，就是使用 <code>leftDiceNumber = Random().nextInt(6) + 1</code></p><p>完整代码如下:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'dart:math'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">return</span> runApp(</span><br><span class="line">    MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        backgroundColor: Colors.red,</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          centerTitle: <span class="keyword">true</span>,</span><br><span class="line">          title: Text(</span><br><span class="line">            <span class="string">'Dicee'</span>,</span><br><span class="line">          ),</span><br><span class="line">          backgroundColor: Colors.red,</span><br><span class="line">        ),</span><br><span class="line">        body: DicePage(),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DicePage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _DicePageState createState() =&gt; _DicePageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_DicePageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">DicePage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> leftDiceNumber = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">int</span> rightDiceNumber = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: Row(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          Expanded(</span><br><span class="line">            child: FlatButton(</span><br><span class="line">              child: Image.asset(<span class="string">'images/dice<span class="subst">$leftDiceNumber</span>.png'</span>),</span><br><span class="line">              onPressed: () &#123;</span><br><span class="line">                setState(() &#123;</span><br><span class="line">                  leftDiceNumber = Random().nextInt(<span class="number">6</span>) + <span class="number">1</span>;</span><br><span class="line">                &#125;);</span><br><span class="line">              &#125;,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          Expanded(</span><br><span class="line">            child: FlatButton(</span><br><span class="line">              child: Image.asset(<span class="string">'images/dice<span class="subst">$rightDiceNumber</span>.png'</span>),</span><br><span class="line">              onPressed: () &#123;</span><br><span class="line">                rightDiceNumber = Random().nextInt(<span class="number">6</span>) + <span class="number">1</span>;</span><br><span class="line">              &#125;,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成果如下：</p><p><img src="/2020/02/22/Flutter-Project-Dicee/image-20200222212905142.png" alt="image-20200222212905142"></p><h1 id="挑战"><a href="#挑战" class="headerlink" title="挑战"></a>挑战</h1><ol><li>如何点击任意一个按钮，两个骰子都会变化呢？</li><li>两个赋值语句实际上是一样重复的，你可以写一个方程使得只需要调用该方程就可以实现和上面一样的功能吗？</li></ol><p>答案我会放在评论区，大家尝试下吧！</p><h1 id="Tip"><a href="#Tip" class="headerlink" title="Tip:"></a>Tip:</h1><ul><li>Hot reload是更新build函数，其余都不会更新</li></ul><h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键:"></a>快捷键:</h1><p><strong>意图动作(Intention Actions)</strong>: <code>Alter + Enter</code><br>比如我们想在<code>Row</code>组件的外部嵌套应该<code>Center</code>组件，以往我们都是把<code>Row</code>组件先剪切到另一个地方，然后将它再粘贴到我们新建的<code>Center</code>组件中去，但是现在，我们可以用到一个炫酷的快捷键<code>Alter + Enter</code>,就可以快速地进行操作！下图所示，是不是很强大！</p><p><img src="/2020/02/22/Flutter-Project-Dicee/image-20200222201316462.png" alt="image-20200222201316462">)<img src="/2020/02/22/Flutter-Project-Dicee/image-20200222201543567.png" alt="image-20200222201543567"></p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Stateless and StateFul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Database 2. Relational Modeling</title>
      <link href="/2020/02/22/Database-Relational-Modeling/"/>
      <url>/2020/02/22/Database-Relational-Modeling/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>一旦数据库的需求以ER图的形式被收集并可视化，接下来的工作就是将ER图转化为一个逻辑数据库模型，即<strong>关系模式</strong> (Relational schema). 关系模式是对关系数据库模型的可视化图表。</p><p>本文将介绍如何将ER图转化为关系模式。</p><a id="more"></a><h1 id="Relational-database-model"><a href="#Relational-database-model" class="headerlink" title="Relational database model"></a>Relational database model</h1><blockquote><p><strong>Logical</strong> database model that represents a database as a collection of related tables 关系数据库模型</p></blockquote><h1 id="Relational-schema"><a href="#Relational-schema" class="headerlink" title="Relational schema"></a>Relational schema</h1><blockquote><p><strong>Visual</strong> depiction (可视化描述) of the relational database model , 数据库的模式结构定义,就是你创建了哪些表，表中的属性是什么</p></blockquote><p>Most contemporary commercial DBMS software packages, are <strong>relational DBMS (RDBMS)</strong> software packages</p><h1 id="Terminology"><a href="#Terminology" class="headerlink" title="Terminology"></a>Terminology</h1><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200204081908618.png" alt="image-20200204081908618"></p><h2 id="Relation"><a href="#Relation" class="headerlink" title="Relation"></a>Relation</h2><blockquote><p><strong>Table</strong> in a relational database</p></blockquote><ul><li><p>In order for a table to be a relation the following conditions must hold:</p><ul><li><p><strong>Each column</strong> must have a name (<u><strong>within</strong></u> one table, each column name must be unique)</p></li><li><p><em>Within one table, *</em>each row** must be <strong>unique*</strong></p></li><li><p>Within each row, each value in each column must be <strong>single</strong> valued (<u>multiple</u> values of the content represented by the column are <u>not</u> allowed in any rows of the table) 在每一行中，每一列中的值必须是单值，也就是说任一行中不允许出现多值。</p></li><li><p>All values in each column must be from the <strong>same (predefined) domain</strong></p></li></ul></li></ul><p>Example of relational and non-relational tables</p><p>比如下图下方中，有两行完全相同，<code>EmpPhone</code>列中倒数第二行是多值的，最后一行最后一列是字符串而不是日期，所以不是一个关系表。</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200221162802365.png" alt="image-20200221162802365"></p><p>列/行<strong>顺序无关</strong>，比如下图中行/列顺序调换，其实两个表是相同的。</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200204083129617.png" alt="image-20200204083129617"></p><h2 id="Primary-key"><a href="#Primary-key" class="headerlink" title="Primary key"></a>Primary key</h2><blockquote><p>Column (or a set of columns) whose value is <strong>unique for each row</strong></p></blockquote><ul><li><p>每一个关系必须有一个主键</p></li><li><p>主键列名称会有一条<u>下划线</u>，用于区分其他列</p></li></ul><p>Relation with the primary key underlined</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200204083340151.png" alt="image-20200204083340151"></p><h1 id="将ER图映射为关系"><a href="#将ER图映射为关系" class="headerlink" title="将ER图映射为关系"></a>将ER图映射为关系</h1><h2 id="Entity"><a href="#Entity" class="headerlink" title="Entity"></a>Entity</h2><p>Mapping entities into relations</p><ul><li><p>每一个实体都是一个关系</p></li><li><p>实体的每一个<u>属性</u>都是关系的<strong>一列</strong></p></li><li><p>If an entity has <u>a single unique attribute</u>, then that attribute becomes the <strong>primary key</strong> in the resulting mapped relation</p></li></ul><p>Example of Entity mapped into a relation</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200204083549516.png" alt="image-20200204083549516"></p><p>Sample data records (样本数据记录) for the mapped relation</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200204083633216.png" alt="image-20200204083633216"></p><h2 id="Composite-attributes"><a href="#Composite-attributes" class="headerlink" title="Composite attributes"></a>Composite attributes</h2><blockquote><p>如果一个实体包含复合属性，则将复合属性的每一个组成部分都映射成关系中的一列，而复合属性自身<strong>并未</strong>显示地出现在映射后的关系中。</p></blockquote><p>Entity with a composite attribute mapped into a relation</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200221164627044.png" alt="image-20200221164627044"></p><p>Sample data records for the mapped relation</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200221164637059.png" alt="image-20200221164637059"></p><h2 id="Composite-primary-key"><a href="#Composite-primary-key" class="headerlink" title="Composite primary key"></a>Composite primary key</h2><blockquote><p>A primary key that is composed of <u>multiple columns</u>, we just have <strong>one</strong> primary key</p></blockquote><p>注意，在得到的下图关系中，<code>Building</code>和<code>RoomNumber</code>都有下划线，因为只有这两列<strong>组合</strong>起来才是主键。</p><p>Example Entity with a unique composite attribute mapped into a relation</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200204083857070.png" alt="image-20200204083857070"></p><p>Example Sample data records for the mapped relation</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200204083923759.png" alt="image-20200204083923759"></p><h2 id="Optional-attributes"><a href="#Optional-attributes" class="headerlink" title="Optional attributes"></a>Optional attributes</h2><blockquote><p>Optional attribute of an entity is mapped as <strong>an optional column</strong>, 可选属性在列中被标记为<code>(O)</code>，表示值可空。</p></blockquote><p>Example Entity with an optional attribute mapped into a relation</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200204084242665.png" alt="image-20200204084242665"></p><p>Example Sample data records for the mapped relation</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200204084407666.png" alt="image-20200204084407666"></p><h2 id="实体完整性约束Entity-integrity-constraint"><a href="#实体完整性约束Entity-integrity-constraint" class="headerlink" title="实体完整性约束Entity integrity constraint"></a>实体完整性约束Entity integrity constraint</h2><blockquote><p>In a relational table, no <strong>primary key</strong> column can have <strong>null (empty) values</strong>. 所有主键属性必须有非空的取值</p></blockquote><ul><li><p>A rule stating that no primary key column can be optional</p></li><li><p>Every RBMS enforces this rule</p></li></ul><p>Example of compliance and violation 遵守与违反的例子</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200204085707091.png" alt="image-20200204085707091"></p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200204085749113.png" alt="image-20200204085749113"></p><h2 id="Foreign-key"><a href="#Foreign-key" class="headerlink" title="Foreign key"></a>Foreign key</h2><blockquote><p>Column in a relation that refers to <strong>a primary key</strong> column <strong>in another (referred) relation</strong>. 关系中的一列是其他一个关系中的主键</p></blockquote><ul><li>For every occurrence of a foreign key, the relational schema <u>contains a line pointing from the foreign key to the corresponding primary key</u><br>每当有外键时，关系模式中都会有一条从外键指向相对应主键的<strong>连线</strong>。</li><li>另外该列会被标记<code>(FK)</code></li></ul><p>比如下图中，<code>EMPLOYEE</code>中的<u>DeptID</u>是另一个关系<code>DEPARTMENT</code>的主键</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200221170203169.png" alt="image-20200221170203169"></p><h1 id="将联系-Relationships-映射为关系数据库组件"><a href="#将联系-Relationships-映射为关系数据库组件" class="headerlink" title="将联系(Relationships)映射为关系数据库组件"></a>将联系(Relationships)映射为关系数据库组件</h1><h2 id="1-M-relationships"><a href="#1-M-relationships" class="headerlink" title="1:M relationships"></a>1:M relationships</h2><blockquote><p>The relation mapped from the <strong>entity on the M side</strong> <em>of the 1:M relationship</em> <strong>has a foreign key</strong> that corresponds to the <u>primary key</u> of the relation mapped from the 1 side of the 1:M relationship.<br>从1:M关系的M侧的实体映射的关系具有外键，该外键对应于从1:M关系的1侧映射的关系的主键。通俗来说呢，多对一关系，多的这一侧对应只有单独一个实体，那么’多’的这一侧就应该有一个单独的键用来表示它跟’一’这一侧的关系。</p></blockquote><h3 id="Mandatory-participation-on-both-sides"><a href="#Mandatory-participation-on-both-sides" class="headerlink" title="Mandatory participation on both sides"></a>Mandatory participation on <u>both sides</u></h3><p>比如下图中，部门可以有多个雇员，但雇员只属于一个部门，所以雇员会有一个外键用来表示他两之间的关系。</p><p>Example - Mapping a 1:M relationship</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200206081835622.png" alt="image-20200206081835622"></p><p>Sample data records for the mapped ER diagram</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200206081902769.png" alt="image-20200206081902769"></p><p>如果是1:M的关系，那么在“1”这一侧的主键<strong>Primary key</strong>可以是“M”这一侧的外键<strong>Foreign Key</strong></p><h3 id="Mandatory-participation-on-the-1-sides"><a href="#Mandatory-participation-on-the-1-sides" class="headerlink" title="Mandatory participation on the 1 sides"></a>Mandatory participation on the 1 sides</h3><p>我们拿上图的例子举例说明，强制参与在1侧的影响是<code>EMPLOYEE</code>中的每一行中的DeptID必须是<u>非空值</u></p><h3 id="Mandatory-participation-on-the-M-sides"><a href="#Mandatory-participation-on-the-M-sides" class="headerlink" title="Mandatory participation on the M sides"></a>Mandatory participation on the M sides</h3><p>同意拿上图距离说明，在M这一侧的强制参与表明，所有的部门都至少有一个雇员与之对应。</p><h3 id="Optional-participation-on-the-1-side"><a href="#Optional-participation-on-the-1-side" class="headerlink" title="Optional participation on the 1 side"></a>Optional participation on the 1 side</h3><p><u>可选参与</u>在1侧的影响是这个<code>外键</code>可为空值。</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200206082302508.png" alt="image-20200206082302508"></p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200206082343918.png" alt="image-20200206082343918"></p><h3 id="Optional-participation-on-the-M-side"><a href="#Optional-participation-on-the-M-side" class="headerlink" title="Optional participation on the M side"></a>Optional participation on the M side</h3><p>可选参与在M这一侧呢就说明<code>DEPARTMENT</code>的实例可以没有<code>EMPLOYEE</code>的实例。比如下图中关系模式(Relational schema)中左侧雇员表中没有对应部门的雇员</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200206082410526.png" alt="image-20200206082410526"></p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200206082416027.png" alt="image-20200206082416027"></p><h3 id="Renaming-a-foreign-key"><a href="#Renaming-a-foreign-key" class="headerlink" title="Renaming a foreign key"></a>Renaming a foreign key</h3><p>对外键进行重命名是合法的，目的是便于理解关系中角色，比如下图中将<code>教授ID</code>从命名为<code>导师ID</code>，帮助我们更好理解学生与教授之间的关系。</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200206082441632.png" alt="image-20200206082441632"></p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200206082448893.png" alt="image-20200206082448893"></p><h2 id="M-N-relationships"><a href="#M-N-relationships" class="headerlink" title="M:N relationships"></a>M:N relationships</h2><p>除了多对多联系的两个实体需要映射为关系外，<strong>多对多联系(relationships)本身</strong>也需要映射为<strong>关系</strong>。这种关系有两个<strong>外键</strong>，对应多对多关系中两个实体的<u>主键</u>。这两个外键就构成了这个新关系的<strong><u>复合主键 (Composite primary key)</u></strong></p><p><u>Bridge relationship</u>: 像桥一样的连接，之间有个桥，即之间有个介质</p><ul><li><p>In addition to the two relations representing the two entities involved in the M:N relationship, <strong>another relation</strong> <em>is created to</em> <strong>represent the M:N <u>relationship</u></strong> <em>itself</em>.</p></li><li><p>This new relation has <strong><em>two foreign keys</em></strong>, corresponding to the primary keys of the two relations representing the two entities involved in the M:N relationship</p></li><li><p>The <strong>two foreign keys form the <u>composite primary key</u></strong> of the new relation</p></li></ul><h3 id="Mandatory-participation-on-both-sides-1"><a href="#Mandatory-participation-on-both-sides-1" class="headerlink" title="Mandatory participation on both sides"></a>Mandatory participation on both sides</h3><p>如下图中展示了学生<code>STUDENT</code>与组织<code>ORGANIZATION</code>这两个实体间的多对多联系–从属<code>BelongsTo</code>关系.当将该ER图映射为关系模式(Relational schema)时，除了学生和组织这两个关系外，还要建立一个代表”从属”这个多对多联系的关系。诸如<code>从属</code>这样的多对多联系，有时候也被称作<strong>桥关系 (Bridge relation)</strong>。</p><h3 id="Bridge-Relation桥关系"><a href="#Bridge-Relation桥关系" class="headerlink" title="* Bridge Relation桥关系"></a>* Bridge Relation桥关系</h3><p>下图关系模式中的<code>BELONGSTO</code> table指出每个学生都有一个组织，因为两边都是强制参与的。</p><p>Example - Mapping an M:N relationship</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200206082656647.png" alt="image-20200206082656647"></p><p>Sample data records for the mapped ER diagram</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200206082727182.png" alt="image-20200206082727182"></p><h3 id="Optional-participation-on-both-sides"><a href="#Optional-participation-on-both-sides" class="headerlink" title="Optional participation on both sides"></a><strong>Optional participation on both sides</strong></h3><p>若<code>STUDNET</code>实体这边的从属关系是<u>可选参与</u>的，则可能会出现存在属于<code>STUDENT</code>表中学生，但这些学生的ID没有出现在<code>BELONGSTO</code>从属关系表中；同样，如果<code>ORGANIZATION</code>实体这边的从属关系是<u>可选参与</u>的，则可能会出现存在额外的属于<code>ORGANIZATION</code>关系中的组织，但这些组织ID没有在<code>BELONGSTO</code>表中体现。</p><p>比如下方关系模式中，学生(4444)没有在从属<code>BELONGSTO</code>关系表中出现可能是因为他不属于任何组织；类似地，组织(O50)也不在从属<code>BELONGSTO</code>关系表中可能是因为它没有任何学生。</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200206083032860.png" alt="image-20200206083032860"></p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200206083039563.png" alt="image-20200206083039563"></p><h3 id="Relationship-with-an-attribute"><a href="#Relationship-with-an-attribute" class="headerlink" title="Relationship with an attribute"></a>Relationship with an attribute</h3><p>我们曾在第二章中提到过，一个多对多联系可以有自己的属性。当一个具有自身属性的多对多联系被映射成为关系模型时，它的每一个属性都将映射为关系的一列。</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200206083313063.png" alt="image-20200206083313063"></p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200206083318994.png" alt="image-20200206083318994"></p><h2 id="1-1-relationships"><a href="#1-1-relationships" class="headerlink" title="1:1 relationships"></a>1:1 relationships</h2><ul><li>One of the resulting relations will have a foreign key pointing to the primary key of another resulting relation<br>映射得到的某个关系将会有应该外键，该外键指向另一个关系的主键</li><li>One of the mapped relations is chosen to have a foreign key referring to the primary key of the other mapped relation 选择其中一个映射关系，使其外键引用另一个映射关系的主键<ul><li>In cases when there is <u>no particular advantage</u> in choosing which resulting relation will include a foreign key, the choice can be <strong>arbitrary</strong><br>如果没有特别的说明，我们可以<strong>任意</strong>挑选一个关系中的主键，将其作为另一个关系的外键。</li><li>但是，有时候选择某一个关系来包含外键，可能比选另一个更有效率。比如，在待选择的关系中，其中一个外键是可选性的，而另一个是强制性的，那么选择强制性的外键更可取。比如下图中，选择<code>EmpID</code>作为外键可以保证外键的取值<u>没有空值</u>。<br>Tip: 但是如果把Foreign key 放到EMPLOYEE中，需要把VehicleID加上<strong>(O)</strong>, optional</li><li>所以，当可选择性和强制性外键同时可供选择时，<u>优先选择强制性外键</u>。</li></ul></li></ul><p>Example - Mapping a 1:1 relationship</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200206084016776.png" alt="image-20200206084016776"></p><p>Sample data records for the mapped ER diagram</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200206084134417.png" alt="image-20200206084134417"></p><h2 id="参照完整性约束Referential-integrity-constraint"><a href="#参照完整性约束Referential-integrity-constraint" class="headerlink" title="参照完整性约束Referential integrity constraint"></a>参照完整性约束Referential integrity constraint</h2><p>关系数据库中对<u>外键有效取值的定义规则</u></p><blockquote><p>In each row of a relation containing a foreign key, the value of the <strong><em>foreign key EITHER matches</em></strong> one of the values in the <strong><em>primary key</em></strong> <em>column of the referred relation</em> <strong>OR</strong> <em>the value of</em> <strong>the foreign key is null</strong> (empty).<br>在包含外键的关系中，每一行的外键取值要么对应起参照关系中的<strong>主键</strong>取值，要么为空。</p></blockquote><ul><li><p>A rule that defines values that are valid for use in foreign keys</p><ul><li>In a relational schema lines pointing from the foreign key to the corresponding primary key are referred to as <strong>referential integrity constraint lines</strong></li></ul></li></ul><h3 id="Compliance-and-violation-examples"><a href="#Compliance-and-violation-examples" class="headerlink" title="Compliance and violation examples"></a>Compliance and violation examples</h3><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200206093330452.png" alt="image-20200206093330452"></p><h2 id="Example-ER-diagram"><a href="#Example-ER-diagram" class="headerlink" title="Example ER diagram :"></a>Example ER diagram :</h2><blockquote><p>ZAGI Retail Company Sales Department Database 零售公司销售部门数据库ER图</p></blockquote><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200211083608237.png" alt="image-20200211083608237"></p><p>Mapped relational schema关系模式</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200211083627974.png" alt="image-20200211083627974"></p><p>Sample data records</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200211083653071.png" alt="image-20200211083653071"></p><h1 id="若干候选键的实体"><a href="#若干候选键的实体" class="headerlink" title="若干候选键的实体"></a>若干候选键的实体</h1><p>Mapping entities with candidate keys (multiple unique attributes) into relations</p><ul><li><p>One of the candidate keys is chosen by database designer the as a primary key during the mapping process<br>选择候选键中的一个称为该实体映射过程中的<strong>主键</strong>。加上<u>下划线</u></p></li><li><p>Other candidate keys are mapped as <u>non-primary</u> key columns<br>其它候选键则被映射为非主键列。用<code>(U)</code>表示他们可被唯一标识</p></li></ul><p>Example:</p><p>比如下图例子中选择<code>EmpID</code>作为主键，则<code>SSN</code>作为非主键列，后面跟上<code>(U)</code></p><p>Entity with candidate keys mapped into a relation</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200211084742096.png" alt="image-20200211084742096">)<img src="/2020/02/22/Database-Relational-Modeling/image-20200211084747401.png" alt="image-20200211084747401"></p><p>Entity with regular and composite candidate keys mapped into a relation</p><p>下图中将复合唯一属性作为非主键列</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200211084821825.png" alt="image-20200211084821825">)<img src="/2020/02/22/Database-Relational-Modeling/image-20200211084825396.png" alt="image-20200211084825396"></p><h1 id="多值属性的实体"><a href="#多值属性的实体" class="headerlink" title="多值属性的实体"></a>多值属性的实体</h1><blockquote><p>Mapping entities with multivalued attributes into relational database constructs</p></blockquote><ul><li><p>An entity containing the <u>multivalued</u> attribute is mapped without the multi-valued attribute</p></li><li><p>The multi-valued attribute is mapped as <strong>a separate relation</strong> that has a column representing the <u>multivalued attribute</u> and <u>a foreign key</u> column referring to the primary key of the relation resulting from the entity itself</p><ul><li>多值属性将被映射为一个<strong><em>单独</em></strong>的关系，该关系包含一个代表<strong>多值属性列</strong>和一个连接对应主键的<strong>外键列</strong>。</li><li>Both of these columns form a <u>composite primary key</u> for the separate relation. 这两列形成一个<strong>复合主键</strong>。</li></ul></li></ul><p>Example:</p><p>如下图，职员拥有多个手机号码。注意，这两列都不是唯一标识的（例如雇员1234，3456和1324共享同一个电话号码），但是将两列组合起来确实唯一标识的。因此，两列组合起来形成<u>复合主键</u>。</p><p>Entity with multivalued attributes mapped into relations</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200211085141387.png" alt="image-20200211085141387"></p><p>Sample data records for the mapped relations</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200211085147064.png" alt="image-20200211085147064"></p><h1 id="派生属性的实体"><a href="#派生属性的实体" class="headerlink" title="派生属性的实体"></a>派生属性的实体</h1><blockquote><p>Mapping derived attributes</p></blockquote><ul><li>Derived attributes are <strong>not</strong> mapped as a part of the relational schema<br>之前提到过，派生属性并非永久存储在数据库中。因此，派生属性并不会被映射为关系模式的一部分。</li><li>They are implemented as a part of the database front-end application.<br>尽管派生属性不属于关系模式的一部分，但它仍可以作为数据库前端应用的一部分。</li></ul><p>Example:</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200211085255817.png" alt="image-20200211085255817"></p><p>Sample data records for the mapped relation</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200211085315891.png" alt="image-20200211085315891"></p><p>The relation shown as presented to a user in a front-end application</p><p>用户可以在前端应用中看到该关系。</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200211085328009.png" alt="image-20200211085328009"></p><h1 id="Various-attributes-Example"><a href="#Various-attributes-Example" class="headerlink" title="Various attributes Example"></a>Various attributes Example</h1><p>Entity with various types of attributes mapped into a relation</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200211085456421.png" alt="image-20200211085456421"></p><p>Sample data records</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200211085511523.png" alt="image-20200211085511523"></p><h1 id="一元关系的映射"><a href="#一元关系的映射" class="headerlink" title="一元关系的映射"></a>一元关系的映射</h1><blockquote><p>Mapping unary relationships</p></blockquote><ul><li>Unary relationships in ER diagrams are mapped in the same way as binary relationships</li></ul><h2 id="1-M-unary-relationships"><a href="#1-M-unary-relationships" class="headerlink" title="1:M unary relationships"></a>1:M unary relationships</h2><ul><li>The relation mapped from an entity involved in a 1:M unary relationship contains a <strong>foreign key</strong> that <strong>corresponds to its own primary key</strong><br>一对多一元联系实体映射得到的关系中包含一个<strong>外键</strong>，并且该外键对应其自身的主键。 但注意：外键名必须<u>区别</u>其对应主键名字，因为不能有名称相同的两列，另外重命名也说明了关系表中外键的角色。</li></ul><p>Example</p><p>比如下图在的<code>ReferredBy</code>,有的顾客可以不被任何其他顾客介绍。</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200218081336654.png" alt="image-20200218081336654"></p><blockquote><p>Client can be referred by only one client but can refer multiple clients</p></blockquote><p>Data records</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200218081534914.png" alt="image-20200218081534914"></p><h2 id="M-N-unary-relationships"><a href="#M-N-unary-relationships" class="headerlink" title="M:N unary relationships"></a>M:N unary relationships</h2><ul><li>In addition to the relation representing the entity involved in a unary M:N relationship, another relation is created to <strong>represent the M:N relationship itself</strong><br>多对多联系本身也需要映射为<strong>另一个关系</strong>.</li><li>This new relation has <strong>two foreign keys</strong>, both of them corresponding to the primary key of the relation representing the entity involved in the unary M:N relationship<br>该关系有两个<strong>外键</strong>，他们对应两个实体的<strong>主键</strong></li><li><em>Each of the</em> <strong>foreign keys is used as a part of the <u>composite primary key</u></strong> <em>of the new relation</em><br>这两个外键作为新关系的<strong>复合主键</strong>。</li><li>同样的，都需要<u>重命名</u>。</li></ul><p>Mapping a M:N unary relationship</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200222123838358.png" alt="image-20200222123838358"></p><p>Sample data records for the mapped relations</p><p>因为两侧都是可选的，所以在关系中，允许没有指导者的雇员(1324, Ted)，也允许有没有被指导的雇员(1234, Becky)</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200222123859093.png" alt="image-20200222123859093"></p><h2 id="1-1-unary-relationships"><a href="#1-1-unary-relationships" class="headerlink" title="1:1 unary relationships"></a>1:1 unary relationships</h2><p>比如下图的例子，每一个人都赠送另一个人一份礼物，并且每一个人会从确定的人那里得到礼物。</p><p>Mapping a 1:1 unary relationship</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200222124150768.png" alt="image-20200222124150768"></p><p>Sample data records for the mapped relation</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200222124207761.png" alt="image-20200222124207761"></p><h1 id="相同实体间多个联系的映射"><a href="#相同实体间多个联系的映射" class="headerlink" title="相同实体间多个联系的映射"></a>相同实体间多个联系的映射</h1><blockquote><p>Mapping multiple relationships between the same entities</p></blockquote><p>比如下图中的例子，<code>PACKAGE</code>关系有两个外键，他们都参照的是<code>EMPLOYEE</code>关系中的主键，但被重命名后便于更好的理解。</p><p>Mapping multiple relationships between the same entities</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200222124541624.png" alt="image-20200222124541624"></p><p>Sample data records for the mapped relations</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200222124555994.png" alt="image-20200222124555994"></p><h1 id="弱实体"><a href="#弱实体" class="headerlink" title="弱实体"></a>弱实体</h1><blockquote><p>Weak entities are mapped in a same way as regular entities with one addition:</p></blockquote><ul><li><em>The resulting relation has a</em> <strong>composite primary key</strong> <em>that is</em> <strong>composed of the partial identifier and the foreign key</strong> <em>corresponding to the primary key of the owner entity</em><br>映射得来的关系有一个<u>复合主键</u>，这个<strong>复合主键</strong>由部分标识符，与属主实体的主键相连的外键共同来构成。</li></ul><p>Mapping a weak entity</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200222125012423.png" alt="image-20200222125012423"></p><p>Sample data records for the mapped relations</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200222125025075.png" alt="image-20200222125025075"></p><h2 id="多个雇主实体"><a href="#多个雇主实体" class="headerlink" title="多个雇主实体"></a>多个雇主实体</h2><blockquote><p>Mapping a weak entity with multiple owners</p></blockquote><p>Mapping a weak entity with two owners</p><p>比如下面这个例子中，学生可能会多次学习同一门课程直到他们通过这门课。比如说，如果学生1111学习课程IS101三次，前两次没通过得了D,第三次得到C通过了。</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200222125205447.png" alt="image-20200222125205447"></p><p>Sample data records for the mapped relations</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200222125221089.png" alt="image-20200222125221089"></p><p>Example:</p><p>当一个联系是一对一联系时，其中的一个弱实体就<strong>没有</strong>部分标识符(Partial identifier)，那这时属主实体的主键就成了这个弱实体的主键。</p><p>Mapping a weak entity with no partial identifier</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200222125517975.png" alt="image-20200222125517975"></p><p>Sample data records for the mapped relations</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200222125530234.png" alt="image-20200222125530234"></p><h1 id="Practice"><a href="#Practice" class="headerlink" title="Practice"></a>Practice</h1><p><strong>Example ER diagram :</strong> HAFH Realty Company Property Management Database</p><p>Q: 下图中有几个实体？</p><ul><li><input disabled type="checkbox"> A; 6个，分别是<code>INSPECTOR</code>, <code>BUILDING</code>, <code>APARTMENT</code>, <code>CORPCLIENT</code>, <code>MANAGER</code>, <code>STAFFMEMBER</code></li></ul><p>Q: 映射到关系模式中，共有几个关系</p><ul><li><input disabled type="checkbox"> A: 因为有6个实体，2个多对多关系(<code>BUILDING-INSPECTOR</code>, <code>APARTMENT-STAFFMEMBER</code>) ，1个多值属性<code>MPhone</code>,所有一共有9个关系。因为每个实体对应一个联系，每个多对多联系也对应一个关系，另外多值属性也对应一个关系</li></ul><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200222125937751.png" alt="image-20200222125937751"></p><p><strong>Example mapped relational schema:</strong> HAFH Realty Company Property Management Database</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200222131027536.png" alt="image-20200222131027536"></p><p><strong>Example:</strong> Sample data records for the HAFH Realty Company Property Management Database (part 1)</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200222131040562.png" alt="image-20200222131040562"></p><p><strong>Example:</strong> Sample data records for the HAFH Realty Company Property Management Database (part 2)</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200222131051752.png" alt="image-20200222131051752"></p><h1 id="约束汇总"><a href="#约束汇总" class="headerlink" title="约束汇总"></a>约束汇总</h1><blockquote><p>Relational database constraints</p></blockquote><ul><li>rules that a relational database has to satisfy in order to be valid</li></ul><p><strong>1. Implicit constraints</strong> 隐式约束</p><ul><li>关系模式的每一个关系必须有独一无二的<strong>关系名</strong></li><li>每一个关系必须符合以下条件：<ul><li>每一列必须有不同的名字</li><li>不能有完全相同的行</li><li>每一行的每一列的取值应该是单值</li><li>每一列中的取值要服从预定义的域 <strong>（域约束）</strong></li><li>列、行顺序无关</li></ul></li><li>每一个关系必须有一个主键，主键必须能唯一标识一行记录 <strong>（主键约束）</strong></li><li>主键值不能为空 <strong>（实体完整性约束）</strong></li><li>在一个包含外键的关系的每一行中，外键的取值要么匹配其参照关系的主键，要么为空 <strong>参照完整性约束</strong></li></ul><p><strong>2. User-defined constraints</strong> 用户自定义约束</p><ul><li><p>指用户自定义的约束，比如强制参与，可选择性等等</p></li><li><p><strong>Business rules</strong></p><ul><li>另一种用户自定义约束叫做业务规则，是在最终生成的数据库中来指定约束，该约束并没有作为创建ER图的一部分。业务规则可以以注释的方式添加（如脚注、评论、特殊符号等等）</li><li>举个例子，比如下图中一个业务规则中规定任意雇员的薪水不能低于5万美元或者高于20万美元。</li></ul></li></ul><p>Business rule for salary amounts</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200222132229296.png" alt="image-20200222132229296"></p><p>Sample data records for the mapped relation</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200222132245550.png" alt="image-20200222132245550"></p><h1 id="关联实体的映射"><a href="#关联实体的映射" class="headerlink" title="关联实体的映射"></a>关联实体的映射</h1><blockquote><p>Mapping associative entities.</p><p>Associative entities are mapped into relational database constructs in the identical way as M:N relationships 可以将其视为另一种描述<strong>多对多关系的方法</strong></p></blockquote><p><strong>Example:</strong> An M:N relationship and associative entity mapped into a relation in the same way</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200222132749956.png" alt="image-20200222132749956"></p><h1 id="三元联系的映射"><a href="#三元联系的映射" class="headerlink" title="三元联系的映射"></a>三元联系的映射</h1><blockquote><p>Ternary relationships are used as many-to-many-to-many relationships<br>三元联系是多对多对多的联系。</p><p>A new relation is created with foreign keys from the participating entities forming a composite primary key of the new relation</p></blockquote><p><strong>Example:</strong> Mapping a ternary relationship</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200222132959499.png" alt="image-20200222132959499"></p><p><strong>Example:</strong> Sample data records for the mapped relations</p><p><img src="/2020/02/22/Database-Relational-Modeling/image-20200222133010696.png" alt="image-20200222133010696"></p>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Relational Modeling </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Database 1. ER Modeling</title>
      <link href="/2020/02/22/Database-ER-Modeling/"/>
      <url>/2020/02/22/Database-ER-Modeling/</url>
      
        <content type="html"><![CDATA[<p>数据库ER模型概念笔记整理</p><h1 id="Entity"><a href="#Entity" class="headerlink" title="Entity"></a>Entity</h1><blockquote><p>用于描述数据库所记录的内容</p></blockquote><h2 id="Entity-instance"><a href="#Entity-instance" class="headerlink" title="Entity instance"></a>Entity instance</h2><blockquote><p>实体实例</p></blockquote><p>Entities must be depicted in the ER diagrams while entity instances are not. But instances are eventually recorded in the database</p><h1 id="Weak-entity"><a href="#Weak-entity" class="headerlink" title="Weak entity"></a>Weak entity</h1><blockquote><p>ER diagram construct depicting an entity that does NOT have a unique attribute of its own</p><p>弱实体表示没有唯一属性的实体</p></blockquote><a id="more"></a><h2 id="Owner-entity"><a href="#Owner-entity" class="headerlink" title="Owner entity"></a>Owner entity</h2><blockquote><p>Entity whose unique attribute provides a mechanism for identifying instances of a weak entity</p><p>ER图中用双框矩形表示</p></blockquote><p><img src="/2020/02/22/Database-ER-Modeling/image-20200220144242983.png" alt="image-20200220144242983"></p><h2 id="Identifying-relationship"><a href="#Identifying-relationship" class="headerlink" title="Identifying relationship"></a>Identifying relationship</h2><blockquote><p>Relationship between a weak entity and its owner entity in which each instance of a weak entity is associated with exactly <strong>one</strong> instance of an owner entity</p><p>ER图中用双框菱形表示</p></blockquote><p><img src="/2020/02/22/Database-ER-Modeling/image-20200220144317948.png" alt="image-20200220144317948"></p><p>Each <strong>weak entity (弱实体)</strong> must be associated with its <strong>owner entity (属主实体)</strong> via an <strong>identifying relationship (标识性联系)</strong></p><p><u><strong>弱实体</strong>必须和它对应的<strong>属主实体</strong>通过<strong>标识性联系</strong>连接起来。</u></p><p>举例如下：</p><p>比如说，多套公寓可以有<u>相同的公寓编号</u>，但在一个建筑物内每套公寓只能有一个<u>唯一的公寓编号</u>。</p><p>此时可以看出，公寓这个实体是没有唯一属性的。但是，公寓编号是唯一的，此时这种属性就叫做<strong>部分键</strong> <code>Partial key</code>。</p><h3 id="Either-1-M-or-1-1-relationship"><a href="#Either-1-M-or-1-1-relationship" class="headerlink" title="Either 1:M or 1:1 relationship"></a>Either 1:M or 1:1 relationship</h3><ul><li>In case of 1:M identifying relationship, a weak entity <strong>must</strong> have a partial key attribute</li><li>In case of 1:1 identifying relationship, a weak entity <strong>doesn’t</strong> need to have a partial key attribute</li></ul><h2 id="Partial-key"><a href="#Partial-key" class="headerlink" title="Partial key"></a>Partial key</h2><blockquote><p>Attribute of a weak entity that combined with the unique attribute of the <u>owner entity</u> uniquely identifies the weak entity’s instances</p><p>ER图中用<u>下滑虚线</u>表示</p></blockquote><p><img src="/2020/02/22/Database-ER-Modeling/image-20200220144333649.png" alt="image-20200220144333649"></p><p>部分键和<code>Owner entity</code>的唯一属性的组合可以唯一标识弱实体的每个实例。</p><p>正如下图所示，弱实体<code>Apartment</code>的实例可以由它的部分码<code>AptNo</code>和属主实体<code>Building</code>的主键<code>BuildingID</code>来唯一标识。</p><p>如：A101, A201, A301 等等</p><p><img src="/2020/02/22/Database-ER-Modeling/image-20200220144512878.png" alt="image-20200220144512878"></p><h2 id="与多值复合属性的比较"><a href="#与多值复合属性的比较" class="headerlink" title="与多值复合属性的比较"></a>与多值复合属性的比较</h2><p>实际上，弱实体和多值复合属性的概念很相似，可以相互替代。</p><p>但是，Weak entity有<code>Partial key</code>，Multivalued composite entity却没有。</p><p><img src="/2020/02/22/Database-ER-Modeling/image-20200220145116239.png" alt="image-20200220145116239"></p><h2 id="Associative-entity"><a href="#Associative-entity" class="headerlink" title="Associative entity"></a>Associative entity</h2><blockquote><p>关联实体是用于描述M:N联系的替代方式之一</p><p>关联实体没有唯一和部分唯一的属性，且通常没有任何属性</p><p>Construct used as an <u>alternative</u> way of depicting M:N relationships</p></blockquote><p><img src="/2020/02/22/Database-ER-Modeling/image-20200220150836670.png" alt="image-20200220150836670"></p><p>如图上方所示，<code>EMPLOYEE</code>可以选择性的参与到<code>AssignedTo</code>中。相应的，在图的下方与其等价的关联实体<code>ASSIGNMENT</code>中，实体<code>EMPLOYEE</code>也可以选择性的参与到联系<code>Includes</code>中。同理，从右侧往左侧看也是一样。</p><p>对于那些度(Degree)大于2的联系（如三元联系 Ternary relationship），关联实体则提供了一种消除ER图中存在歧义的方法。</p><h1 id="Ternary-relationship"><a href="#Ternary-relationship" class="headerlink" title="Ternary relationship"></a>Ternary relationship</h1><blockquote><p>Relationship involving three entities (degree 3 relationship)</p></blockquote><p>如图所示，如果我想表示哪家供应商提供了哪些零部件给了哪类产品， 下方的三个二元关系事不能表示的。这时候我们就需要关联实体！</p><p><img src="/2020/02/22/Database-ER-Modeling/image-20200220151617507.png" alt="image-20200220151617507"></p><p><img src="/2020/02/22/Database-ER-Modeling/image-20200220151802027.png" alt="image-20200220151802027"></p><p>我们也可以再创建一个实体代替三元关系</p><p><img src="/2020/02/22/Database-ER-Modeling/image-20200220152026248.png" alt="image-20200220152026248"></p><h1 id="Attributes"><a href="#Attributes" class="headerlink" title="Attributes"></a>Attributes</h1><blockquote><p>Depiction of a <strong>characteristic</strong> of an entity.</p></blockquote><h2 id="Unique-attributes"><a href="#Unique-attributes" class="headerlink" title="Unique attributes"></a>Unique attributes</h2><blockquote><p>Whose value is different for each entity instance. 通常，每个实体都必须有至少一个Unique attribute。</p></blockquote><h2 id="Composite-attribute-not-a-type"><a href="#Composite-attribute-not-a-type" class="headerlink" title="Composite attribute (not a type)"></a>Composite attribute (not a type)</h2><blockquote><p>Attribute that is composed of several attributes</p></blockquote><ul><li>NOT an additional attribute of an entity。不是额外的属性</li><li>its purpose is to indicate a situation in which a collection of attributes has an additional meaning, besides the individual meanings of each attribute</li></ul><p>举个栗子，下图中<code>CustFullName</code>就是个复合属性(Composite attribute)，它由两部分组成，分别是<code>CustFName</code> &amp; <code>CustLName</code>。因为复合属性不是额外的属性，所以图中共有5个属性(不包含CustFullName)</p><p><img src="/2020/02/22/Database-ER-Modeling/image-20200220081100990.png" alt="image-20200220081100990"></p><hr><h3 id="Composite-unique-attribute"><a href="#Composite-unique-attribute" class="headerlink" title="Composite unique attribute"></a>Composite unique attribute</h3><blockquote><p>Attribute that is composed of several attributes and whose value is different for each entity instance</p></blockquote><p>复合的唯一属性，在实际生活中，可能单个属性不能作为<u>唯一属性</u>，但它们的组合却可以是。</p><p>举个栗子，教室所在的教学楼和房间号其中一个是不能代表教室所在位置的，因为教学楼里有多个教室，每栋教学楼可能都有相同的房间号、。因此，只有把他们结合在一起时，才能作为教室的唯一属性(Unique attr)。</p><p><img src="/2020/02/22/Database-ER-Modeling/image-20200220082114398.png" alt="image-20200220082114398"></p><h2 id="1-Candidate-keys-候选键"><a href="#1-Candidate-keys-候选键" class="headerlink" title="1. (Candidate keys)  候选键"></a>1. (Candidate keys) 候选键</h2><p>又称<code>Multiple unique attributes多个唯一属性</code></p><blockquote><p>When an entity has more than one <u>unique</u> attribute each unique attribute is also called a <strong>candidate key</strong></p><p>候选码的意义是这些属性可以作为主键(Primary key)</p></blockquote><p>举个栗子，下图中有两个主键，分别是<code>EmpID</code> &amp; <code>SSN</code></p><p><img src="/2020/02/22/Database-ER-Modeling/image-20200220083024700.png" alt="image-20200220083024700"></p><h2 id="2-Multivalued-attribute"><a href="#2-Multivalued-attribute" class="headerlink" title="2. Multivalued attribute"></a>2. Multivalued attribute</h2><blockquote><p>Attribute for which instances of an entity can have <strong>multiple values</strong> for the same attribute. 当同一个属性可能有不同的取值情况</p><p>Multivalued attributes are those that are can <strong>take on more than one value</strong>.</p></blockquote><p>比如下图中，每个职员可能有不同的手机号码<code>PhoneNumber</code></p><p><img src="/2020/02/22/Database-ER-Modeling/image-20200220083612632.png" alt="image-20200220083612632"></p><h2 id="3-Derived-attribute"><a href="#3-Derived-attribute" class="headerlink" title="3.Derived attribute"></a>3.Derived attribute</h2><blockquote><p>派生属性，并非永久储存在数据库中的属性；是由其他属性派生而来</p><p>Attribute whose values are calculated and not permanently stored in a database;</p><p>Derived attributes are attributes whose value can be <strong>calculated</strong> from related attribute values.</p></blockquote><p>如下图所示</p><p><code>YearsInBusiness</code>就是个派生属性，其值事有开业时间计算而来，也就是开店持续时间</p><p><img src="/2020/02/22/Database-ER-Modeling/image-20200220083948658.png" alt="image-20200220083948658"></p><h2 id="4-Optional-attribute"><a href="#4-Optional-attribute" class="headerlink" title="4.Optional attribute"></a>4.Optional attribute</h2><blockquote><p>可选属性，表示有的属性可以没有取值。</p><p>Attribute that is allowed to not have a value.</p></blockquote><p>比如下图中，职员可能没有年终将近，所以用可选属性表示。</p><p><img src="/2020/02/22/Database-ER-Modeling/image-20200220084429442.png" alt="image-20200220084429442"></p><h2 id="Review-回顾一下"><a href="#Review-回顾一下" class="headerlink" title="Review 回顾一下"></a>Review 回顾一下</h2><p>我们来复习一下，看看能不能捋清楚~</p><p><img src="/2020/02/22/Database-ER-Modeling/image-20200220084741636.png" alt="image-20200220084741636"></p><ul><li><input disabled type="checkbox"> Mutiple unique attr: SSN, Email, EmpID</li><li><input disabled type="checkbox"> Composite attr: FullName</li><li><input disabled type="checkbox"> Multivalued attr: Phone, Skill</li><li><input disabled type="checkbox"> Derived attr: YearsWithCo, Age</li><li><input disabled type="checkbox"> Optional attr: Bonus(O)</li><li><input disabled type="checkbox"> Other attr: Salart, DataOfBirth</li></ul><h1 id="Relationship"><a href="#Relationship" class="headerlink" title="Relationship"></a>Relationship</h1><blockquote><p>Depicting how entities are related. 每个实体必须通过<u>联系</u>与至少一个其他的实体相关联</p></blockquote><h2 id="Cardinality-constraint-基数约束"><a href="#Cardinality-constraint-基数约束" class="headerlink" title="Cardinality constraint 基数约束"></a>Cardinality constraint 基数约束</h2><blockquote><p>Depict how many instances of one entity can be associated with instances of another entity. 表示一个实体可以有多少个实例与另一个实体的实例相关联。</p></blockquote><h3 id="Maximum-Cardinality最大基数"><a href="#Maximum-Cardinality最大基数" class="headerlink" title="Maximum Cardinality最大基数"></a>Maximum Cardinality最大基数</h3><ul><li><p>One (represented by a straight bar: I)</p></li><li><p>Many (represented by a crow’s foot symbol)</p></li></ul><h3 id="Minimum-Cardinality最小基数"><a href="#Minimum-Cardinality最小基数" class="headerlink" title="Minimum Cardinality最小基数"></a>Minimum Cardinality最小基数</h3><ul><li>Optional (represented by a circular symbol: 0) 可选的</li><li>Mandatory (represented by a straight bar: I) 强制的</li></ul><p>四种可能的基数约束</p><p><img src="/2020/02/22/Database-ER-Modeling/image-20200218151525718.png" alt="image-20200218151525718"></p><h3 id="Types-of-Relationships-maximum-cardinality-wise"><a href="#Types-of-Relationships-maximum-cardinality-wise" class="headerlink" title="Types of Relationships (maximum cardinality-wise)"></a>Types of Relationships (maximum cardinality-wise)</h3><ul><li>One-to-one relationship (1:1)</li><li>One-to-many relationship (1:M)</li><li>Many-to-many relationship (M:N)</li></ul><h2 id="Relationship-attribute"><a href="#Relationship-attribute" class="headerlink" title="Relationship attribute:"></a>Relationship attribute:</h2><blockquote><p>In some cases <strong>M:N</strong> relationships can actually have attributes of their own</p></blockquote><p>举个栗子，ER图如下， 对属于某个组织下的每个学生在改组织内担任的职能（如主席，副主席，会计等）。但是呢，一个学生在不同的组织中可能有不同的职能。若将职能(Function)放在<code>STUDENT</code>实体里，那么就无法确认该学生的职能对应哪个组织；若将其放在<code>ORAGNIZATION</code>实体中，就无法确认该职能由谁担任。因此职能属性恰当的位置应该是作为<code>BelongsTo</code>联系的属性。</p><p><img src="/2020/02/22/Database-ER-Modeling/image-20200220073749782.png" alt="image-20200220073749782"></p><p>但对于<u>1:M</u>或<u>1:1</u>联系呢，其属性可以转化为该联系中最大基数为1的实体属性，因为对于该实体来说，1代表的是只能有1个实体实例。举个栗子入学时间可以作为<code>Attends</code>联系的属性，但是因为每个学生只能加入一个学院，所以将其放在学生<code>STUDENT</code>实体的属性也是可以的。</p><p><img src="/2020/02/22/Database-ER-Modeling/image-20200220074802908.png" alt="image-20200220074802908"></p><p>因此，总结来说，就是对于一些<code>M:N</code>联系来说，<code>Relationship Attribute</code>是<strong>必要</strong>的，但对于<code>1:M</code>或<code>1:1</code>联系，没有必要。</p><h2 id="最小基数-最大基数确切值"><a href="#最小基数-最大基数确切值" class="headerlink" title="最小基数/最大基数确切值"></a>最小基数/最大基数确切值</h2><blockquote><p>Exact minimum and maximum cardinality in relationships</p></blockquote><ul><li>Exact minimum/and or maximum cardinalities can be depicted<br>in ER diagrams</li></ul><p>举个例子:</p><p>下图表示每名学生<strong>必须</strong>选择最少2门，最多6门课；每门课<strong>必须</strong>最少有5人上课，最多40人上课。</p><p><img src="/2020/02/22/Database-ER-Modeling/image-20200220090106919.png" alt="image-20200220090106919"></p><h2 id="Degree-of-a-relationship"><a href="#Degree-of-a-relationship" class="headerlink" title="Degree of a relationship"></a>Degree of a relationship</h2><blockquote><p>表示有多少个实体参与到该联系中</p><p>reflects how many <strong>entities</strong> are involved in the relationship</p></blockquote><ul><li><p>Binary relationship</p><ul><li>relationship btwn two entities ( degree 2 relationship)</li></ul></li><li><p>Unary relationship (<strong>recursive relationship</strong>)</p><ul><li>occurs when an entity is involved in a relationship with itself<br>(degree 1 relationship)</li></ul><p><img src="/2020/02/22/Database-ER-Modeling/image-20200220091239399.png" alt="image-20200220091239399"></p></li></ul><h2 id="Relational-roles"><a href="#Relational-roles" class="headerlink" title="Relational roles"></a>Relational roles</h2><blockquote><p>additional syntax that can be used in ER diagrams at the discretion of a data modeler(由数据建模者自行决定) to <u>clarify the role of each entity in a relationship</u></p></blockquote><p>比如下图中，一个用户可以是推荐者，推荐多个用户，也可以不是推荐者；</p><p>一个用户也是可以是被推荐者，且只能被一个用户推荐，也可以不是被推荐者。</p><p><img src="/2020/02/22/Database-ER-Modeling/image-20200220093034613.png" alt="image-20200220093034613"></p><h1 id="命名约定"><a href="#命名约定" class="headerlink" title="命名约定"></a>命名约定</h1><ul><li>Entity: 大写字母的名词，如<code>STUDENT</code></li><li>Attribute：大小写字母的组合的<u>名词</u>，如<code>StudentID</code></li><li>Relationship：大小写字母的组合的动词，如<code>Refers</code></li></ul><h1 id="Cheatsheet"><a href="#Cheatsheet" class="headerlink" title="Cheatsheet"></a>Cheatsheet</h1><table><thead><tr><th>Name</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td>Entity</td><td>实体</td><td><img src="/2020/02/22/Database-ER-Modeling/image-20200220081713711.png" alt="image-20200220081713711"></td></tr><tr><td>Relation</td><td>菱形</td><td><img src="/2020/02/22/Database-ER-Modeling/image-20200218150915833.png" alt="image-20200218150915833"></td></tr><tr><td>Unique Attr</td><td>带有下划线</td><td><img src="/2020/02/22/Database-ER-Modeling/image-20200218150613228.png" alt="image-20200218150613228"></td></tr><tr><td>Composite Attr</td><td>带有括号，由几个部分子属性组成，但它不属于属性</td><td><img src="/2020/02/22/Database-ER-Modeling/image-20200220081759846.png" alt="image-20200220081759846"></td></tr><tr><td>Candidate Key</td><td>又称Multiple unique attributes.有多个候选键可作为主键</td><td><img src="/2020/02/22/Database-ER-Modeling/image-20200220083024700.png" alt="image-20200220083024700"></td></tr><tr><td>Multivalued Attr</td><td>由双椭圆线表示</td><td><img src="/2020/02/22/Database-ER-Modeling/image-20200220083723613.png" alt="image-20200220083723613"></td></tr><tr><td>Derived Attr</td><td>用虚线表示，意为不是永久储存在数据库中</td><td><img src="/2020/02/22/Database-ER-Modeling/image-20200220084156575.png" alt="image-20200220084156575"></td></tr><tr><td>Optional Atte</td><td>和普通属性差不多，只是在名字后加上<strong>(O)</strong></td><td><img src="/2020/02/22/Database-ER-Modeling/image-20200220084559579.png" alt="image-20200220084559579"></td></tr><tr><td>Weak Entity</td><td>双框矩形</td><td><img src="/2020/02/22/Database-ER-Modeling/image-20200220144817623.png" alt="image-20200220144817623"></td></tr><tr><td>Partial Key</td><td>下滑虚线</td><td><img src="/2020/02/22/Database-ER-Modeling/image-20200220144837817.png" alt="image-20200220144837817"></td></tr><tr><td>Identical relationship</td><td>双框菱形</td><td><img src="/2020/02/22/Database-ER-Modeling/image-20200220144906817.png" alt="image-20200220144906817"></td></tr><tr><td>Associated Entity</td><td>描述M:N联系的另一种方法，特别适用于三元联系</td><td><img src="/2020/02/22/Database-ER-Modeling/image-20200220152204298.png" alt="image-20200220152204298"></td></tr><tr><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ER modeling </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>libFuzzer</title>
      <link href="/2020/02/10/libFuzzer/"/>
      <url>/2020/02/10/libFuzzer/</url>
      
        <content type="html"><![CDATA[<h1 id="libFuzzer-Tutorial"><a href="#libFuzzer-Tutorial" class="headerlink" title="libFuzzer Tutorial"></a><a href="https://github.com/google/fuzzing/blob/master/tutorial/libFuzzerTutorial.md" target="_blank" rel="noopener">libFuzzer Tutorial</a></h1><p>中文翻译：<a href="https://www.cnblogs.com/studyskill/p/7127078.html" target="_blank" rel="noopener">https://www.cnblogs.com/studyskill/p/7127078.html</a></p><p><a href="https://www.codercto.com/a/21107.html" target="_blank" rel="noopener">https://www.codercto.com/a/21107.html</a></p><h2 id="libFuzzer初体验"><a href="#libFuzzer初体验" class="headerlink" title="libFuzzer初体验"></a>libFuzzer初体验</h2><p>首先克隆一个github的repo</p><p><code>git clone https://github.com/google/fuzzing.git</code></p><p>然后编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang++ -g -fsanitize=address -fsanitize-coverage=trace-pi-guard fuzzing/tutorial/libFuzzer/fuzz_me.cc ~/libFuzzer/libFuzzer.a //libFuzzer是你安装libFuzzer是编译生成的文件，需要运行它</span><br></pre></td></tr></table></figure><p>成功后，输入</p><p><code>./a.out 2&gt;&amp;1 | grep ERROR</code></p><p>看到如下信息即可～</p><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">==1102==ERROR: AddressSanitizer: heap-buffer-overflow on address</span><br></pre></td></tr></table></figure><p><img src="/2020/02/10/libFuzzer/image-20200208151421980.png" alt="image-20200208151421980"></p><h2 id="Hello-World-小试牛刀"><a href="#Hello-World-小试牛刀" class="headerlink" title="Hello World 小试牛刀"></a>Hello World 小试牛刀</h2><p>首先，需要定义一个 fuzz target，这其实是个方程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function"><span class="keyword">int</span> <span class="title">LLVMFuzzerTestOneInput</span><span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> *Data, <span class="keyword">size_t</span> Size)</span> </span>&#123;</span><br><span class="line">  DoSomethingWithData(Data, Size);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看看fuzz_mer.cc这个源码吧</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">FuzzMe</span><span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> *Data, <span class="keyword">size_t</span> DataSize)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> DataSize &gt;= <span class="number">3</span> &amp;&amp;</span><br><span class="line">      Data[<span class="number">0</span>] == <span class="string">'F'</span> &amp;&amp;</span><br><span class="line">      Data[<span class="number">1</span>] == <span class="string">'U'</span> &amp;&amp;</span><br><span class="line">      Data[<span class="number">2</span>] == <span class="string">'Z'</span> &amp;&amp;</span><br><span class="line">      Data[<span class="number">3</span>] == <span class="string">'Z'</span>;  <span class="comment">// :‑&lt;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function"><span class="keyword">int</span> <span class="title">LLVMFuzzerTestOneInput</span><span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> *Data, <span class="keyword">size_t</span> Size)</span> </span>&#123;</span><br><span class="line">  FuzzMe(Data, Size);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>拓展：</p><p>uint8_t，uint16_t，uint32_t等都不是什么新的数据类型，它们只是使用typedef给类型起的别名，所以以<code>_t</code>结尾</p><p>这样都是为了<u>移植</u>而设计出来的类型</p><p>按照POSIX标准，一般整形对应的*_t类型为：</p><p>1字节 uint8_t == unsigned char<br>2字节 uint16_t == unsigned short<br>4字节 uint32_t == unsigned long<br>8字节 uint64_t == unsigned long long<br>size_t同理</p><p>size_t主要用于计数，如sizeof函数返回值类型即为size_t。在不同位的机器中所占的位数也不同；<br>size_t是无符号数，ssize_t是有符号数。</p><p>在32位机器中定义为：typedef unsigned int size_t; （<strong>4个字节</strong>）<br>在64位机器中定义为：typedef unsigned long size_t;（8个字节）</p><p>由于size_t是无符号数，因此，<strong>当变量有可能为负数时，必须使用ssize_t</strong>。因为当有符号整型和无符号整型进行运算时，有符号整型会先自动转化成无符号。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">unsigned</span> short a;</span><br><span class="line"> short <span class="keyword">int</span> b = <span class="number">-1</span>;</span><br><span class="line"> a = b;</span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; <span class="string">"b="</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//b=-1</span></span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; <span class="string">"a="</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//a=65535</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>To build a fuzzer binary for this target you need to compile the source using the recent <strong>Clang compiler</strong> with the following extra flags:</p><ul><li><code>-fsanitize-coverage=trace-pc-guard</code> (required): provides in-process coverage information to libFuzzer.//在内存中变换</li><li><code>-fsanitize=address</code> (recommended): enables <a href="http://clang.llvm.org/docs/AddressSanitizer.html" target="_blank" rel="noopener">AddressSanitizer</a></li><li><code>-g</code> (recommended): <u>enables debug info</u>, makes the error messages easier to read.</li></ul><p>Then you need to link the target code with <code>libFuzzer.a</code> which provides the <code>main()</code> function.需要去连接<code>libFuzzer.a</code>的原因是它<u>提供了main()方程</u> <code>libFuzzer.main()</code></p><p>当你运行<code>./a.out</code>时，你应该会看到如下信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">INFO: Seed: 236105658</span><br><span class="line">INFO: Loaded 1 modules (7 guards): [0x753ea0, 0x753ebc), </span><br><span class="line">INFO: -max_len is not provided, using 64</span><br><span class="line">INFO: A corpus is not provided, starting from an empty corpus</span><br><span class="line"><span class="comment">#0READ units: 1</span></span><br><span class="line"><span class="comment">#1INITED cov: 3 ft: 3 corp: 1/1b exec/s: 0 rss: 10Mb</span></span><br><span class="line"><span class="comment">#9NEW    cov: 4 ft: 4 corp: 2/11b exec/s: 0 rss: 11Mb L: 10 MS: 3 ChangeByte-InsertByte-CMP- DE: "\x00\x00\x00\x00\x00\x00\x00\x00"-</span></span><br><span class="line"><span class="comment">#32384NEW    cov: 5 ft: 5 corp: 3/43b exec/s: 0 rss: 14Mb L: 32 MS: 3 PersAutoDict-CopyPart-InsertByte- DE: "\x00\x00\x00\x00\x00\x00\x00\x00"-</span></span><br><span class="line"><span class="comment">#133743NEW    cov: 6 ft: 6 corp: 4/75b exec/s: 0 rss: 21Mb L: 32 MS: 2 CopyPart-ChangeByte-</span></span><br><span class="line"><span class="comment">#423440NEW    cov: 7 ft: 7 corp: 5/115b exec/s: 0 rss: 42Mb L: 40 MS: 4 CopyPart-CMP-ChangeBinInt-ChangeByte- DE: "\xff\xff\xff\xff\xff\xff\xff\xff"-</span></span><br><span class="line">=================================================================</span><br><span class="line">==1072==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6020003e0a73 at pc 0x0000004f7d8b bp 0x7ffe37983040 sp 0x7ffe37983038</span><br><span class="line">READ of size 1 at 0x6020003e0a73 thread T0</span><br><span class="line">    <span class="comment">#0 0x4f7d8a in FuzzMe(unsigned char const*, unsigned long) /home/dongyang/git/fuzzing/tutorial/libFuzzer/fuzz_me.cc:9:7</span></span><br><span class="line">    <span class="comment">#1 0x4f7dee in LLVMFuzzerTestOneInput /home/dongyang/git/fuzzing/tutorial/libFuzzer/fuzz_me.cc:13:3</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="Interpretation"><a href="#Interpretation" class="headerlink" title="Interpretation"></a>Interpretation</h2><p>让我们来解释下</p><p><code>INFO: Seed: 236105658</code>这个Fuzzer通过这个随机的seed开始，我们也可以在命令在加上<code>-seed=236105658</code>来获得同样的结果</p><p><code>INFO: -max_len is not provided, using 64 INFO: A corpus is not provided, starting from an empty corpus</code></p><p>默认情况下，libFuzzer认为所有的输入都是64比特或者更小，若想要改变它，可以使用 <code>-max_len=N</code> 或者使用一个非空的<u>seed corpus</u>种子语料库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">0    READ units: 1</span></span><br><span class="line"><span class="meta">#</span><span class="bash">1    INITED cov: 3 ft: 3 corp: 1/1b <span class="built_in">exec</span>/s: 0 rss: 10Mb</span></span><br><span class="line"><span class="meta">#</span><span class="bash">9    NEW    cov: 4 ft: 4 corp: 2/11b <span class="built_in">exec</span>/s: 0 rss: 11Mb L: 10 MS: 3 ChangeByte-InsertByte-CMP- DE: <span class="string">"\x00\x00\x00\x00\x00\x00\x00\x00"</span>-</span></span><br><span class="line"><span class="meta">#</span><span class="bash">32384NEW    cov: 5 ft: 5 corp: 3/43b <span class="built_in">exec</span>/s: 0 rss: 14Mb L: 32 MS: 3 PersAutoDict-CopyPart-InsertByte- DE: <span class="string">"\x00\x00\x00\x00\x00\x00\x00\x00"</span>-</span></span><br><span class="line"><span class="meta">#</span><span class="bash">133743NEW    cov: 6 ft: 6 corp: 4/75b <span class="built_in">exec</span>/s: 0 rss: 21Mb L: 32 MS: 2 CopyPart-ChangeByte-</span></span><br><span class="line"><span class="meta">#</span><span class="bash">423440NEW    cov: 7 ft: 7 corp: 5/115b <span class="built_in">exec</span>/s: 0 rss: 42Mb L: 40 MS: 4 CopyPart-CMP-ChangeBinInt-ChangeByte- DE: <span class="string">"\xff\xff\xff\xff\xff\xff\xff\xff"</span>-</span></span><br></pre></td></tr></table></figure><p>这说明libFuzzer至少尝试了423440个输入(<code>#423440</code>)，并且发现总共201字节的5个输入(<code>corp: 5/115b</code>)，总共覆盖了7个覆盖点<code>cov: 7</code>，我们可以将覆盖点视为代码中的基本块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">==1072==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6020003e0a73 at pc 0x0000004f7d8b bp 0x7ffe37983040 sp 0x7ffe37983038</span><br><span class="line">READ of size 1 at 0x6020003e0a73 thread T0</span><br><span class="line">    #0 0x4f7d8a in FuzzMe(unsigned char const*, unsigned long) /home/dongyang/git/fuzzing/tutorial/libFuzzer/fuzz_me.cc:9:7</span><br><span class="line">    #1 0x4f7dee in LLVMFuzzerTestOneInput /home/dongyang/git/fuzzing/tutorial/libFuzzer/fuzz_me.cc:13:3</span><br></pre></td></tr></table></figure><p>On one of the inputs AddressSanitizer has <strong>detected</strong> a <code>heap-buffer-overflow</code> bug and <strong>aborted</strong> the execution.一旦发现溢出就退出。</p><p><img src="/2020/02/10/libFuzzer/image-20200208160125798.png" alt="image-20200208160125798"></p><p>Before exiting the process libFuzzer has created a file on disc with the bytes that triggered the crash. Take a look at this file. What do you see? Why did it trigger the crash?在退出进程之前，libFuzzer已经在磁盘上创建了一个文件，其中包含触发崩溃的字节。</p><p>To reproduce the crash again w/o fuzzing run 如果想要再次看到这个crash的记录可以用下面的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;a.out crash-0eb8e4ed029b774d80f2b66408203801cb982a60&#x2F;&#x2F;存储crash的输入。也就是Data</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Fuzzing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fuzzing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AFL</title>
      <link href="/2020/02/10/AFL/"/>
      <url>/2020/02/10/AFL/</url>
      
        <content type="html"><![CDATA[<h1 id="使用AFL来插桩-instrumentation"><a href="#使用AFL来插桩-instrumentation" class="headerlink" title="使用AFL来插桩(instrumentation)"></a>使用AFL来插桩(instrumentation)</h1><h2 id="选择C程序"><a href="#选择C程序" class="headerlink" title="选择C程序"></a>选择C程序</h2><p>用个简单的C程序作为例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件名暂设为afl_test.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vuln</span><span class="params">(<span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">if</span>(str[<span class="number">0</span>] == <span class="string">'A'</span> &amp;&amp; len == <span class="number">66</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        raise(SIGSEGV);</span><br><span class="line">        <span class="comment">//如果输入的字符串的首字符为A并且长度为66，则异常退出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(str[<span class="number">0</span>] == <span class="string">'F'</span> &amp;&amp; len == <span class="number">6</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        raise(SIGSEGV);</span><br><span class="line">        <span class="comment">//如果输入的字符串的首字符为F并且长度为6，则异常退出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"it is good!\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    gets(buf);<span class="comment">//存在栈溢出漏洞</span></span><br><span class="line">    <span class="built_in">printf</span>(buf);<span class="comment">//存在格式化字符串漏洞</span></span><br><span class="line">    vuln(buf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>首先用afl-gcc进行编译,接着选择小于1k的文件(暂时命名为testcase) 作为输入，然后启动afl-fuzz程序，将刚才的输入文件(testcase) 作为程序的执行输入文件。AFL将在testcase的基础上进行自动变异，使程序产生crash，然后保存到某个指定文件夹下。</p><h2 id="AFL编译"><a href="#AFL编译" class="headerlink" title="AFL编译"></a>AFL编译</h2><p>将上面的afl_test.c进行编译：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">afl-gcc -g afl-test.c -o afl-test // ‘-o afl-test‘ 表示指定编译后的程序名为afl-test</span><br></pre></td></tr></table></figure><p>同样的是，若编译C++源码，则用<code>afl-g++</code></p><p>接着建立两个文件夹，分别是<code>fuzz_in</code>，<code>fuzz_out</code>,用来存放程序的输入和输出</p><p>在<code>fuzz_in</code>中还需要创建一个testcase的文件，随便输入一点东西即可，比如我们输入<code>aaaa</code>即可</p><p><strong>注意</strong></p><p>在编译项目时，通常有Makefile，这时就需要在Makefile中添加内容</p><p>gcc/g++重新编译目标程序的方法是：<br>CC=/path/to/afl/afl-gcc ./configure<br>make clean all<br>对于一个C++程序，要设置:<br>CXX=/path/to/afl/afl-g++.</p><p>afl-clang和afl-clang++的使用方法类似。</p><h2 id="开始Fuzz测试"><a href="#开始Fuzz测试" class="headerlink" title="开始Fuzz测试"></a>开始Fuzz测试</h2><p>For target binaries that accept input directly <strong>from stdin</strong>, the usual syntax is:<br>对那些可以直接从<strong>stdin</strong>读取输入的目标程序来说，语法如下：</p><blockquote><p>从stdin读取输入也就是说从键盘输入到缓冲区的东西</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./afl-fuzz -i testcase_dir -o findings_dir /path/to/program [...params...]</span></span><br></pre></td></tr></table></figure><p>For programs that <strong>take input from a file</strong>, use ‘<strong>@@</strong>‘ to mark the location in the target’s command line where the input file name should be placed. The fuzzer will substitute this for you:<br>对从文件读取输入的目标程序来说，要用“@@”，语法如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./afl-fuzz -i testcase_dir -o findings_dir /path/to/program @@</span></span><br></pre></td></tr></table></figure><p>You can also use the <code>-f</code> option to have the mutated data written to <u>a specific file</u>. This is useful if the program expects a particular file extension or so.</p><p>在此例中，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">afl-fuzz -i fuzz_in -o fuzz_out ./afl_test</span><br></pre></td></tr></table></figure><p>但一般都会报错</p><p><img src="/2020/02/10/AFL/image-20200208110130660.png" alt="image-20200208110130660"></p><p>根据提示，需要输入<code>echo core &gt;/proc/sys/kernel/core_pattern</code>，但是我们要在管理者权限下进行设置。</p><p>多以就进行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br><span class="line">echo core &gt;/proc/sys/kernel/core_pattern</span><br></pre></td></tr></table></figure><p>再次运行试试看呢，如果还是有报错，根据它的提示进行修改</p><p><img src="/2020/02/10/AFL/image-20200208110450127.png" alt="image-20200208110450127"></p><p>此处它要求我们修改性能</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /sys/devices/system/cpu</span><br><span class="line">echo performance | tee cpu*/cpufreq/scaling_governor</span><br></pre></td></tr></table></figure><p>这样只是暂时修改了CPU运行模式为高性能，想要修改默认运行模式的话，请使用下方命令</p><p><strong>1、安装sysfsutils</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install sysfsutils</span><br></pre></td></tr></table></figure><p><strong>2、编辑/etc/sysfs.conf</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/sysfs.conf</span><br></pre></td></tr></table></figure><p><strong>3. 在文件下方增加如下语句:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">devices&#x2F;system&#x2F;cpu&#x2F;cpu0&#x2F;cpufreq&#x2F;scaling_governor &#x3D; performance</span><br></pre></td></tr></table></figure><p>返回到刚才的路径下～</p><p>再次运行我们就成功啦，wohoo～</p><p><img src="/2020/02/10/AFL/image-20200208110649545.png" alt="image-20200208110649545"></p><p>接下来，让我们试试看这里面这些东西都是些何方神圣。</p><h1 id="Interpreting-output"><a href="#Interpreting-output" class="headerlink" title="Interpreting output"></a>Interpreting output</h1><p>See the <a href="http://lcamtuf.coredump.cx/afl/status_screen.txt" target="_blank" rel="noopener">status_screen.txt</a> file for information on how to <strong>interpret</strong> the displayed stats and monitor the health of the process.</p><p>The fuzzing process will continue until you press <code>Ctrl-C</code>. At minimum, you want to allow the fuzzer to complete one queue cycle, which may take anywhere from <u>a couple of hours to a week or so</u>.</p><h2 id="1-Process-timing"><a href="#1-Process-timing" class="headerlink" title="1) Process timing"></a>1) Process timing</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+----------------------------------------------------+</span><br><span class="line">|        run time : 0 days, 8 hrs, 32 min, 43 sec    |</span><br><span class="line">|   last new path : 0 days, 0 hrs, 6 min, 40 sec     |</span><br><span class="line">| last uniq crash : none seen yet                    |</span><br><span class="line">|  last uniq hang : 0 days, 1 hrs, 24 min, 32 sec    |</span><br><span class="line">+----------------------------------------------------+</span><br></pre></td></tr></table></figure><p>这部分很容易理解，告诉我们fuzzer已经运行了多久</p><h2 id="2-Overall-results"><a href="#2-Overall-results" class="headerlink" title="2) Overall results"></a>2) Overall results</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+-----------------------+</span><br><span class="line">|  cycles done : 0      |</span><br><span class="line">|  total paths : 2095   |</span><br><span class="line">| uniq crashes : 0      |</span><br><span class="line">|   uniq hangs : 19     |</span><br><span class="line">+-----------------------+</span><br></pre></td></tr></table></figure><blockquote><p>The first field in this section gives you the count of queue passes done so far - that is, the number of times the fuzzer went over all the interesting test cases discovered so far, fuzzed them, and <strong>looped back to the very beginning</strong>. Every fuzzing session should be allowed to complete at least one cycle; and ideally, should run much longer than that.<br>本节中的第一个字段给出了到目前为止队列传递的次数——也就是说，模糊化器检查到目前为止发现的所有有趣的测试用例、对它们进行模糊化并返回到最开始的次数。应允许每个模糊化会话至少完成一个周期；理想情况下，运行时间应该比这长得多</p></blockquote><p>这里包含了运行的总周期数、总路径数、崩溃数以及超时次数。</p><p>其中，总周期数可以用来作为何时停止fuzzing的参考。随着不断地fuzzing，周期数会不断增大，其颜色也会由<u>洋红色，逐步变为黄色、蓝色、绿色。</u>一般来说，当其变为<strong>绿色</strong>时，代表可执行的内容已经很少了，继续fuzzing下去也不会有什么新的发现了。此时，我们便可以通过Ctrl-C，<u>结束</u>当前的fuzzing</p><p><img src="/2020/02/10/AFL/1552021969_5c81f9d1d0676.jpg!small" alt="6.jpg"></p><h2 id="何时停止Fuzz"><a href="#何时停止Fuzz" class="headerlink" title="* 何时停止Fuzz"></a>* 何时停止Fuzz</h2><blockquote><p>当状态窗口中”cycles done”字段颜色变为<strong><u>绿色</u></strong>该字段的颜色可以作为何时停止测试的参考，随着周期数不断增大，其颜色也会由洋红色，逐步变为黄色、蓝色、绿色。当其变为绿色时，继续Fuzzing下去也很难有新的发现了，这时便可以通过Ctrl-C停止afl-fuzz。</p></blockquote><h2 id="3-Cycle-progress"><a href="#3-Cycle-progress" class="headerlink" title="3) Cycle progress"></a>3) Cycle progress</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+-------------------------------------+</span><br><span class="line">|  now processing : 1296 (61.86%)     |</span><br><span class="line">| paths timed out : 0 (0.00%)         |</span><br><span class="line">+-------------------------------------+</span><br></pre></td></tr></table></figure><p>This box tells you <strong>how far</strong> along the fuzzer is with the current queue cycle: it shows the <strong>ID of the test case</strong> it is currently working on, plus the number of inputs it decided to <strong>ditch</strong> because they were persistently timing out.</p><h2 id="4-Map-coverage"><a href="#4-Map-coverage" class="headerlink" title="4) Map coverage"></a>4) Map coverage</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+--------------------------------------+</span><br><span class="line">|    map density : 10.15% / 29.07%     |</span><br><span class="line">| count coverage : 4.03 bits/tuple     |</span><br><span class="line">+--------------------------------------+</span><br></pre></td></tr></table></figure><p>The section provides some trivia about the coverage observed by the instrumentation embedded in the target binary. 本节提供了一些关于嵌入到目标二进制文件中的工具所观察到的覆盖率的细节。</p><p>框中的第一行告诉您我们已经命中了多少个分支元组，与位图可以容纳的数量成比例。左边的数字描述<u>当前输入</u>；右边的是<u>整个输入语料库的值</u>。</p><h2 id="5-Stage-progress"><a href="#5-Stage-progress" class="headerlink" title="5) Stage progress"></a>5) Stage progress</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+-------------------------------------+</span><br><span class="line">|  now trying : interest 32&#x2F;8         |</span><br><span class="line">| stage execs : 3996&#x2F;34.4k (11.62%)   |</span><br><span class="line">| total execs : 27.4M                 |</span><br><span class="line">|  exec speed : 891.7&#x2F;sec             |</span><br><span class="line">+-------------------------------------+</span><br></pre></td></tr></table></figure><p>这里包含正在测试的fuzzing策略、进度、目标的执行总次数、目标的执行速度</p><h2 id="6-Findings-in-depth"><a href="#6-Findings-in-depth" class="headerlink" title="6) Findings in depth"></a>6) Findings in depth</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+--------------------------------------+</span><br><span class="line">| favored paths : 879 (41.96%)         |</span><br><span class="line">|  new edges on : 423 (20.19%)         |</span><br><span class="line">| total crashes : 0 (0 unique)         |</span><br><span class="line">|  total tmouts : 24 (19 unique)       |</span><br><span class="line">+--------------------------------------+</span><br></pre></td></tr></table></figure><p>This gives you several metrics that are of interest mostly to complete nerds.</p><p>The section includes the number of paths that the fuzzer likes the most based on a minimization algorithm baked into the code (these will get considerably more air time), and the number of test cases that actually resulted in better edge coverage (versus just pushing the branch hit counters up). There are also additional, more detailed counters for crashes and timeouts.<br>这一部分包括模糊化器最喜欢的路径的数量，这些路径是基于烘焙到代码中的最小化算法(这些将获得相当多的播放时间)，以及实际上导致更好的边缘覆盖的测试用例的数量(相对于仅仅向上推动分支命中计数器)。还有更多更详细的崩溃和超时计数器。</p><h2 id="7-Fuzzing-strategy-yields"><a href="#7-Fuzzing-strategy-yields" class="headerlink" title="7) Fuzzing strategy yields"></a>7) Fuzzing strategy yields</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+-----------------------------------------------------+</span><br><span class="line">|   bit flips : 57/289k, 18/289k, 18/288k             |</span><br><span class="line">|  byte flips : 0/36.2k, 4/35.7k, 7/34.6k             |</span><br><span class="line">| arithmetics : 53/2.54M, 0/537k, 0/55.2k             |</span><br><span class="line">|  known ints : 8/322k, 12/1.32M, 10/1.70M            |</span><br><span class="line">|  dictionary : 9/52k, 1/53k, 1/24k                   |</span><br><span class="line">|       havoc : 1903/20.0M, 0/0                       |</span><br><span class="line">|        trim : 20.31%/9201, 17.05%                   |</span><br><span class="line">+-----------------------------------------------------+</span><br></pre></td></tr></table></figure><p>This is just another nerd-targeted section keeping track of how many paths we have netted, in proportion to the number of execs attempted, for each of the fuzzing strategies discussed earlier on. This serves to convincingly validate assumptions about the usefulness of the various approaches taken by afl-fuzz.<br>记录我们已经为前面讨论的每一个模糊化策略获得了多少条路径，与尝试的高管人数成比例。这有助于令人信服地验证afl-fuzz所采取的各种方法的有效性的假设。</p><h2 id="8-Path-geometry"><a href="#8-Path-geometry" class="headerlink" title="8) Path geometry"></a>8) Path geometry</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+---------------------+</span><br><span class="line">|    levels : 5       |</span><br><span class="line">|   pending : 1570    |</span><br><span class="line">|  pend fav : 583     |</span><br><span class="line">| own finds : 0       |</span><br><span class="line">|  imported : 0       |</span><br><span class="line">| stability : 100.00% |</span><br><span class="line">+---------------------+</span><br></pre></td></tr></table></figure><p>The first field in this section tracks the <strong>path depth</strong> reached through the guided fuzzing process.</p><p>The next field shows you the number of inputs that have not gone through any fuzzing yet.</p><h1 id="分析输出"><a href="#分析输出" class="headerlink" title="分析输出"></a>分析输出</h1><p>通过上图，我们看出一共跑出了6个unique的crash</p><p>进入对应的<code>fuzz_out</code>文件夹下看看有些什么</p><p><img src="/2020/02/10/AFL/image-20200208110908820.png" alt="image-20200208110908820"></p><h1 id="三个文件夹-queue-crashes-hangs"><a href="#三个文件夹-queue-crashes-hangs" class="headerlink" title="三个文件夹 (queue/, crashes/, hangs/)"></a>三个文件夹 (queue/, crashes/, hangs/)</h1><blockquote><p>created within the output directory and updated in real time</p></blockquote><ul><li><p><code>queue/</code>: <strong>test cases</strong> for every distinctive execution path, plus all the starting files given by the user. This is the synthesized <strong>corpus</strong>. 简单来说，就是<u>每个不同执行路径的测试用例</u></p><ul><li>Before using this corpus for any other purposes, you can shrink it to a smaller size using the <code>afl-cmin</code> tool. The tool will find a <strong>smaller subset</strong> of files offering equivalent edge coverage.</li></ul></li><li><p><code>crashes/</code>: unique test cases that cause the tested program to receive <strong>a fatal signal</strong> (e.g., SIGSEGV, SIGILL, SIGABRT). The entries are grouped by the received signal. 产生的crash的样例</p></li><li><p><code>hangs/</code>: unique test cases that cause the tested program to <strong>time out</strong>导致程序超时. The default time limit before something is classified as a hang is the larger of <u>1 second and the value of the -t parameter</u>. The value can be fine-tuned by setting <code>AFL_HANG_TMOUT</code>, but this is rarely necessary.</p></li></ul><p>Crashes and hangs are considered “<strong>unique</strong>“ if the associated execution paths involve any state transitions <u>not seen in previously-recorded faults</u>.</p><hr><h3 id="Tip1"><a href="#Tip1" class="headerlink" title="Tip1:"></a>Tip1:</h3><p>​ When you can’t reproduce a crash found by afl-fuzz, the most likely cause is that you are not setting <strong>the same memory limit</strong> as used by the tool.</p><p>​ Try:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> LIMIT_MB=50</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ( <span class="built_in">ulimit</span> -Sv $[LIMIT_MB &lt;&lt; 10]; /path/to/tested_binary ... )</span></span><br></pre></td></tr></table></figure><h3 id="Tip2"><a href="#Tip2" class="headerlink" title="Tip2:"></a>Tip2:</h3><p>​ Any <u>existing output</u> directory can be also used to <strong>resume aborted jobs</strong>; try:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./afl-fuzz -i- -o existing_output_dir [...etc...]</span></span><br></pre></td></tr></table></figure><h3 id="Tip3"><a href="#Tip3" class="headerlink" title="Tip3:"></a>Tip3:</h3><p>​ If you have gnuplot installed, you can also generate some pretty graphs for any active fuzzing task using afl-plot. For an example of how this looks like, see <a href="http://lcamtuf.coredump.cx/afl/plot/.也可以使用afl-plot" target="_blank" rel="noopener">http://lcamtuf.coredump.cx/afl/plot/.也可以使用afl-plot</a> 为任何活动的模糊化任务生成一些漂亮的图形</p><hr><h2 id="处理测试结果-分析crash"><a href="#处理测试结果-分析crash" class="headerlink" title="处理测试结果,分析crash"></a>处理测试结果,分析crash</h2><p>进入之前设置的输出文件夹(fuzz_out)，使用xxd命令来查看crash的内容</p><p>对照着我们的源码来看</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vuln</span><span class="params">(<span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">if</span>(str[<span class="number">0</span>] == <span class="string">'A'</span> &amp;&amp; len == <span class="number">66</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        raise(SIGSEGV); <span class="comment">//如果输入的字符串的首字符为A并且长度为66，则异常退出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(str[<span class="number">0</span>] == <span class="string">'F'</span> &amp;&amp; len == <span class="number">6</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        raise(SIGSEGV); <span class="comment">//如果输入的字符串的首字符为F并且长度为6，则异常退出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"it is good!\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    gets(buf); <span class="comment">//存在栈溢出漏洞</span></span><br><span class="line">    <span class="built_in">printf</span>(buf); <span class="comment">//存在格式化字符串漏洞</span></span><br><span class="line">    vuln(buf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于<a href="https://www.cnblogs.com/bonelee/p/6149543.html" target="_blank" rel="noopener">栈溢出</a>和<a href="https://blog.csdn.net/sealyao/article/details/5961330" target="_blank" rel="noopener">格式化字符串</a>漏洞，请点击相应链接。</p><p>第一个样例，发现符合<strong>栈溢出</strong>漏洞的crash情况</p><p><img src="/2020/02/10/AFL/image-20200208120058632.png" alt="image-20200208120058632"></p><p>第二个样例，发现符合首字符为‘F’且字符串长度为6的异常退出情况</p><p><img src="/2020/02/10/AFL/image-20200208120129245.png" alt="image-20200208120129245"></p><p>第三个样例，发现符合格式化字符串的%n任意地址写的漏洞情况</p><p><img src="file:///media/dongyang/Office/_NAU%20course/1-2020%20Spring/CS-499%20EMBEDDED%20TESTING/Embeded-Notes/AFL%20(American%20fuzzy%20lop).assets/image-20200208120227211.png?lastModify=1581188615" alt="image-20200208120227211"></p><p>第四个样例，发现符合栈溢出漏洞的crash情况</p><p><img src="/2020/02/10/AFL/image-20200208120142338.png" alt="image-20200208120142338"></p><p>第五个样例，发现符合栈溢出漏洞的crash情况</p><p><img src="/2020/02/10/AFL/image-20200208120151587.png" alt="image-20200208120151587"></p><p>第六个样例，发现符合首字符为A且字符串长度为66的异常退出情况</p><p><img src="/2020/02/10/AFL/image-20200208120207846.png" alt="image-20200208120207846"></p><p>Reference:</p><p><a href="https://xz.aliyun.com/t/4314" target="_blank" rel="noopener">https://xz.aliyun.com/t/4314</a></p><p><a href="http://lcamtuf.coredump.cx/afl/README.txt" target="_blank" rel="noopener">http://lcamtuf.coredump.cx/afl/README.txt</a></p>]]></content>
      
      
      <categories>
          
          <category> Fuzzing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fuzzing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fuzz testing introduction</title>
      <link href="/2020/02/10/Fuzz-testing-introduction/"/>
      <url>/2020/02/10/Fuzz-testing-introduction/</url>
      
        <content type="html"><![CDATA[<h1 id="Fuzzing-or-Fuzz-Testing"><a href="#Fuzzing-or-Fuzz-Testing" class="headerlink" title="Fuzzing (or Fuzz Testing)"></a>Fuzzing (or Fuzz Testing)</h1><ul><li>Generate a huge number of test inputs<ul><li>increase code coverage and make the code misbehave</li></ul></li></ul><p>什么是模糊测试呢？简单来说，就是给程序很多随机的数据作为输入，最后看看有哪些bug 或者crash造成程序崩溃。</p><p>Fuzzing is one of the most powerful and proven strategies for identifying security issues in real-world software; it is responsible for the vast majority of remote code execution and privilege escalation bugs found to date in security-critical software.<br>模糊化是识别现实世界软件中安全问题的最强大、最成熟的策略之一；它是迄今为止在安全关键软件中发现的绝大多数远程代码执行和权限提升错误的原因。</p><a id="more"></a><p>到目前为止的几种方法:</p><ul><li>Corpus distillation 语料库蒸馏<ul><li>该方法依靠覆盖信号从大量高质量的候选文件集中选择感兴趣的种子子集，然后用传统方法对其进行模糊化。这种方法工作得非常好，但需要这样一个<u>语料库随时可用</u>。此外，块覆盖度量只提供了对程序状态的非常简单的理解，对于指导长期的模糊化工作不太有用。</li></ul></li><li>Program flow analysis (Concolic execution)程序流分析</li><li>Symbolic execution 符号执行</li><li>Static analysis 静态分析</li><li>All these methods are extremely promising in experimental settings, but tend to suffer from reliability and performance problems in practical uses 但在实际应用中往往会遇到可靠性和性能问题- and currently do not offer a viable alternative to “dumb” fuzzing techniques.</li></ul><h2 id="AFL-American-fuzzy-lop"><a href="#AFL-American-fuzzy-lop" class="headerlink" title="AFL (American fuzzy lop)"></a>AFL (American fuzzy lop)</h2><p>AFL则是fuzzing的一个很好用的工具，全称是American Fuzzy Lop，由Google安全工程师Michał Zalewski开发的一款开源fuzzing测试工具，可以高效地对<strong>二进制程序</strong>进行fuzzing，挖掘可能存在的内存安全漏洞，如栈溢出、堆溢出、UAF、double free等。由于需要在相关代码处插桩，因此AFL主要用于对开源软件进行测试。当然配合QEMU等工具，也可对闭源二进制代码进行fuzzing，但执行效率会受到影响。</p><p>工作原理：</p><p>通过对源码进行重新编译时进行<strong>插桩</strong>（简称编译时插桩）的方式自动产生测试用例来探索二进制程序内部新的执行路径。AFL也支持直接对没有源码的二进制程序进行测试，但需要QEMU的支持。</p><p>整个算法可以总结为：</p><ol><li>将用户提供的初始测试用例加载到队列中，</li><li>从队列中取出下一个输入文件，</li><li>尝试将测试用例修剪到最小的尺寸，但不改变程序的测量行为，</li><li>使用各种平衡的、经过充分研究的传统模糊化策略反复改变文件，</li><li>如果任何生成的<strong>突变</strong>导致了由仪器记录的新状态转换，则将突变输出作为<u>新条目添加到队列</u>中。</li><li>继续进行2步骤</li></ol><p>根据构建过程的具体情况，重新编译目标程序的正确方法可能会有所不同，但一种近乎通用的方法是:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> CC=/path/to/afl/afl-gcc ./configure</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make clean all</span></span><br></pre></td></tr></table></figure><p>For C++ programs, you’d would also want to set</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CXX&#x3D;&#x2F;path&#x2F;to&#x2F;afl&#x2F;afl-g++.</span><br></pre></td></tr></table></figure><p>The clang wrappers (<code>afl-clang</code> and <code>afl-clang++</code>) can be used in the same way; clang users may also opt to leverage a higher-performance instrumentation mode, as described in<code>llvm_mode/README.llvm</code>.</p><p>当测试库时，您需要找到或编写<u>一个简单的程序</u>，从stdin或文件中读取数据，并将其传递给被测试的库。在这种情况下，必须将这个可执行文件与检测库的静态版本相链接，或者确保正确的。因此文件是在运行时加载的(通常是通过设置<code>LD_LIBRARY_PATH</code>)。最简单的选择是静态构建，通常可能通过:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> CC=/path/to/afl/afl-gcc ./configure --<span class="built_in">disable</span>-shared</span></span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在Linux环境下</p><p>先下载安装包： <a href="http://lcamtuf.coredump.cx/afl/releases/afl-latest.tgz" target="_blank" rel="noopener">http://lcamtuf.coredump.cx/afl/releases/afl-latest.tgz</a></p><p>然后解压 <code>$ tar -zxvf afl-latest.tgz</code></p><p>进入该文件夹<code>$ cd afl-latest</code></p><p>安装:<code>$ sudo make install</code></p><p>测试是否成功：<code>$ afl-fuzz</code></p><h3 id="若运行时有报错"><a href="#若运行时有报错" class="headerlink" title="若运行时有报错"></a>若运行时有报错</h3><p>When we do this afl-fuzz will usually complain that you should change your CPUFREQ settings to performance because the automatic frequency scaling by the Linux kernel doesn’t work well with afl. You can do this by running this command as root:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo performance | tee &#x2F;sys&#x2F;devices&#x2F;system&#x2F;cpu&#x2F;cpu*&#x2F;cpufreq&#x2F;scaling_governor</span><br></pre></td></tr></table></figure><p>Alternatively you can also just tell afl to ignore the CPUFREQ settings:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AFL_SKIP_CPUFREQ&#x3D;1 afl-fuzz -i in -o out [path_to_tool] @@</span><br></pre></td></tr></table></figure><h3 id="Fuzzing-binary"><a href="#Fuzzing-binary" class="headerlink" title="Fuzzing binary"></a>Fuzzing binary</h3><p>程序执行前对程序源码进行<strong>插桩</strong>（instrumentation），以便在程序执行过程中实时获取程序的执行情况。AFL用遗传算法对程序的输入进行变异，用边覆盖（edge converage）来测试fuzzing的性能。</p><p>The fuzzing process itself is carried out by the afl-fuzz utility. This program requires</p><ol><li>a <u>read-only</u> directory with initial test cases, 包含初始测试用例的只读目录</li><li>a separate place to <u>store</u> its findings, 单独的存储其发现的地方</li><li>plus a path to the binary to <u>test</u>. 要测试的二进制文件的路径</li></ol><p>For target binaries that accept input directly <strong>from stdin</strong>, the usual syntax is:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./afl-fuzz -i testcase_dir -o findings_dir /path/to/program [...params...]</span></span><br></pre></td></tr></table></figure><p>For programs that <strong>take input from a file</strong>, use ‘<strong>@@</strong>‘ to mark the location in the target’s command line where the input file name should be placed. The fuzzer will substitute this for you:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./afl-fuzz -i testcase_dir -o findings_dir /path/to/program @@</span></span><br></pre></td></tr></table></figure><p>You can also use the <code>-f</code> option to have the mutated data written to <u>a specific file</u>. This is useful if the program expects a particular file extension or so.</p><h4 id="Crash-triage"><a href="#Crash-triage" class="headerlink" title="Crash triage"></a>Crash triage</h4><p>For test case minimization, give <code>afl-tmin</code> a try. The tool can be operated in a very simple way:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./afl-tmin -i test_case -o minimized_result -- /path/to/program [...]</span></span><br></pre></td></tr></table></figure><hr><p>We need one or several input samples. Preferably they should be small. We place them in a directory we will call <em>in</em>. Now we start <em>afl-fuzz</em>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">afl-fuzz -i in -o out [path_to_tool] @@</span><br></pre></td></tr></table></figure><p>The <code>@@</code> is replaced by the fuzzed input files. If you skip that it will pass the fuzzed file on the standard input. When we do this afl-fuzz will usually complain that you should change your CPUFREQ settings to performance because the automatic frequency scaling by the Linux kernel doesn’t work well with afl. You can do this by running this command as root:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo performance | tee &#x2F;sys&#x2F;devices&#x2F;system&#x2F;cpu&#x2F;cpu*&#x2F;cpufreq&#x2F;scaling_governor</span><br></pre></td></tr></table></figure><p>Alternatively you can also just tell afl to ignore the CPUFREQ settings:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AFL_SKIP_CPUFREQ&#x3D;1 afl-fuzz -i in -o out [path_to_tool] @@</span><br></pre></td></tr></table></figure><p><img src="/2020/02/10/Fuzz-testing-introduction/afl-screenshot.png" alt="afl-fuzz"></p><p>The most interesting value is the <code>uniq crashes</code>. There you will see if you found any segfaults, most of them will likely be memory access errors.</p><p>The samples that create crashes will be collected in <code>out/crashes</code>. You will also find potential hangs in <code>out/hangs</code>, however you should check if they really hang your tool. The default timeout of afl is quite low so you’ll see a lot of false positives here.</p><p>To enable the use of Address Sanitizer you need to set the environment variable AFL_USE_ASAN to 1 during compilation:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AFL_USE_ASAN=1 ./configure CC=afl-gcc CXX=afl-g++ LD=afl-gcc--disable-shared</span><br><span class="line">AFL_USE_ASAN=1 make</span><br></pre></td></tr></table></figure><h2 id="libFuzzer"><a href="#libFuzzer" class="headerlink" title="libFuzzer"></a>libFuzzer</h2><blockquote><p>LibFuzzer is linked with the library under test, and feeds fuzzed inputs to the library via a specific fuzzing entrypoint (aka “<strong>target function</strong>”); the fuzzer then tracks which areas of the code are reached, and generates <strong>mutations</strong> on the <strong>corpus</strong> of input data in order to maximize the code coverage. Start with some test corpus (may be empty)</p></blockquote><ul><li>Provide your own target function:<ul><li>(const uint8_t *Data, size_t Size)</li></ul></li><li>Build it with special compiler instrumentation (LLVM)<ul><li>Add one of the sanitizers for better results</li></ul></li><li>Run on many CPUs<ul><li>The test corpus (语料库) will grow</li><li>Bugs will be reported, reproducers will be recorded</li></ul></li></ul><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p><a href="https://github.com/Dor1s/libfuzzer-workshop" target="_blank" rel="noopener">https://github.com/Dor1s/libfuzzer-workshop</a></p><p>首先</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;Dor1s&#x2F;libfuzzer-workshop.git</span><br><span class="line">sudo ln -s &#x2F;usr&#x2F;include&#x2F;asm-generic &#x2F;usr&#x2F;include&#x2F;asm</span><br><span class="line">apt-get install gcc-multilib</span><br></pre></td></tr></table></figure><p>然后进入 <code>libfuzzer-workshop/</code> ， 执行 <code>sudo sh checkout_build_install_llvm.sh</code> 安装好 <code>llvm</code>.</p><p>然后进入 <code>libfuzzer-workshop/libFuzzer/Fuzzer/</code> ，执行 <code>sudo shbuild.sh</code> 编译好 <code>libFuzzer</code>。</p><p>如果编译成功，会生成 <code>libfuzzer-workshop/libFuzzer/Fuzzer/libFuzzer.a</code></p><h3 id="Fuzz-Target"><a href="#Fuzz-Target" class="headerlink" title="Fuzz Target"></a>Fuzz Target</h3><p>The first step in using libFuzzer on a library is to implement <strong>a <em>fuzz target</em></strong> – a function that accepts an array of bytes and does something interesting with these bytes using the API under test. Like this:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fuzz_target.cc</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function"><span class="keyword">int</span> <span class="title">LLVMFuzzerTestOneInput</span><span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> *Data, <span class="keyword">size_t</span> Size)</span> </span>&#123;</span><br><span class="line">  DoSomethingInterestingWithMyAPI(Data, Size);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">// Non-zero return values are reserved for future use.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li><p>Fuzzing engine 将在同一过程中用<u>不同的输入</u>，多次执行模糊目标。</p></li><li><p>它必须允许任何类型的输入(empty, huge, malformed, etc).</p></li><li><p>It must not exit() on any input.</p></li><li><p>It may use threads but ideally all threads should be joined at the end of the function. 举个栗子：pthread_join()</p><p>pthread_join() 作用：</p><ul><li>用于等待其他线程结束：当调用 pthread_join() 时，当前线程会处于阻塞状态，直到被调用的线程结束后，当前线程才会重新开始执行。</li><li>对线程的资源进行回收：如果一个线程是非分离的（默认情况下创建的线程都是非分离）并且没有对该线程使用 pthread_join() 的话，该线程结束后并<u>不会释放其内存空间</u></li></ul></li><li><p>必须尽可能具有<u>确定性</u>。不确定性(例如，不基于input byte (输入字节) 的随机决策)将使模糊化效率低下。</p></li><li><p>It must be fast. 尽量避免立方或更大的复杂性、日志记录或过度的内存消耗.</p></li><li><p>通常，目标越窄越好。例如，如果您的目标可以解析多种数据格式，请将其拆分为多个目标，每种格式一个。</p></li></ul><h3 id="Fuzzer-Usage"><a href="#Fuzzer-Usage" class="headerlink" title="Fuzzer Usage"></a>Fuzzer Usage</h3><p>In order to build your fuzzer binary, use the <code>fsanitize=fuzzer</code> flag during the compilation and linking. In most cases you may want to combine libFuzzer with <a href="http://clang.llvm.org/docs/AddressSanitizer.html" target="_blank" rel="noopener">AddressSanitizer</a> (ASAN), <a href="http://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html" target="_blank" rel="noopener">UndefinedBehaviorSanitizer</a> (UBSAN), or both. You can also build with <a href="http://clang.llvm.org/docs/MemorySanitizer.html" target="_blank" rel="noopener">MemorySanitizer</a> (MSAN)</p><p>举例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">clang -g -O1 -fsanitize=fuzzer                         mytarget.c # Builds the fuzz target w/o sanitizers</span><br><span class="line">clang -g -O1 -fsanitize=fuzzer,address                 mytarget.c # Builds the fuzz target with ASAN</span><br><span class="line">clang -g -O1 -fsanitize=fuzzer,signed-integer-overflow mytarget.c # Builds the fuzz target with a part of UBSAN</span><br><span class="line">clang -g -O1 -fsanitize=fuzzer,memory                  mytarget.c # Builds the fuzz target with MSAN</span><br></pre></td></tr></table></figure><h3 id="Corpus-语料库"><a href="#Corpus-语料库" class="headerlink" title="Corpus (语料库)"></a>Corpus (语料库)</h3><p>Coverage-guided fuzzers like libFuzzer rely on a <strong><em>corpus</em></strong> of sample inputs for the code under test. This corpus should ideally be <strong>seeded</strong> with a varied collection of valid and invalid inputs for the code under test;</p><p>For example, for a graphics library the initial corpus might hold a variety of different small PNG/JPG/GIF files. The fuzzer generates random mutations (mutation) based around the sample inputs in the current corpus. If a mutation triggers execution of a previously-uncovered path in the code under test, then that mutation is saved to the corpus for future variations.</p><h3 id="Running"><a href="#Running" class="headerlink" title="Running"></a>Running</h3><p>To run the fuzzer, first create a <u>Corpus directory</u> that holds the initial “<strong>seed</strong>” sample inputs:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir CORPUS_DIR</span><br><span class="line">cp /some/input/samples/* CORPUS_DIR</span><br></pre></td></tr></table></figure><p>Then run the fuzzer on the corpus directory:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./my_fuzzer CORPUS_DIR  # -max_len=1000 -jobs=20 ...</span><br></pre></td></tr></table></figure><p>As the fuzzer discovers <u>new</u> interesting test cases (i.e. test cases that trigger coverage of new paths through the code under test), those test cases will be <u>added</u> to the corpus directory.</p><p>By default, the fuzzing process will continue indefinitely – at least until a bug is found. Any crashes or sanitizer failures will be reported as usual, stopping the fuzzing process, and the particular input that triggered the bug will be written to disk (typically as <code>crash-</code>, <code>leak-</code>, or <code>timeout-</code>).</p><h3 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h3><p>To run the fuzzer, pass <u>zero or more corpus directories as command line arguments.</u> The fuzzer will read test inputs from each of these corpus directories, and any new test inputs that are generated will be written back to the first corpus directory:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./fuzzer [-flag1=val1 [-flag2=val2 ...] ] [dir1 [dir2 ...] ]</span><br></pre></td></tr></table></figure><h4 id="The-most-important-command-line-options-are"><a href="#The-most-important-command-line-options-are" class="headerlink" title="The most important command line options are:"></a>The most important command line options are:</h4><ul><li><p><code>-help</code></p><p>Print help message (<code>-help=1</code>).</p></li><li><p><code>-seed</code></p><p>Random seed. If 0 (the default), the seed is generated.</p></li><li><p><code>-runs</code></p><p>Number of individual test runs, -1 (the default) to run indefinitely.</p></li><li><p><code>-max_len</code></p><p><u>Maximum length of a test input</u>. If 0 (the default), libFuzzer tries to guess a good value based on the corpus (and reports it).</p></li><li><p><code>-len_control</code></p><p>Try generating small inputs first, then try larger inputs over time. Specifies the rate at which the length limit is increased (smaller == faster). Default is 100. If 0, immediately try inputs with size up to max_len.</p></li><li><p><code>-timeout</code></p><p>Timeout in <u>seconds</u>, default 1200. If an input takes longer than this timeout, the process is treated as a failure case.</p></li><li><p><code>-rss_limit_mb</code></p><p><u>Memory usage limit</u> in Mb, default 2048. Use 0 to disable the limit. If an input requires more than this amount of RSS memory to execute, the process is treated as a failure case. The limit is checked in a separate thread every second. If running w/o ASAN/MSAN, you may use ‘ulimit -v’ instead.</p></li><li><p><code>-malloc_limit_mb</code></p><p>If non-zero, the fuzzer will exit if the target tries to allocate this number of Mb with one malloc call. If zero (default) same limit as rss_limit_mb is applied.</p></li><li><p><code>-timeout_exitcode</code></p><p>Exit code (default 77) used if libFuzzer reports a timeout.</p></li><li><p><code>-error_exitcode</code></p><p>Exit code (default 77) used if libFuzzer itself (not a sanitizer) reports a bug (leak, OOM, etc).</p></li><li><p><code>-max_total_time</code></p><p>If positive, indicates the maximum total time in seconds to run the fuzzer. If 0 (the default), run indefinitely.</p></li><li><p><code>-merge</code></p><p>If set to 1, any corpus inputs from the 2nd, 3rd etc. corpus directories that trigger new code coverage will be merged into the first corpus directory. Defaults to 0. This flag can be used to minimize a corpus.</p></li><li><p><code>-merge_control_file</code></p><p>Specify a control file used for the merge process. If a merge process gets killed it tries to leave this file in a state suitable for resuming the merge. By default a temporary file will be used.</p></li><li><p><code>-minimize_crash</code></p><p>If 1, minimizes the provided crash input. Use with -runs=N or -max_total_time=N to limit the number of attempts.</p></li><li><p><code>-reload</code></p><p>If set to 1 (the default), the corpus directory is re-read periodically to check for new inputs; this allows detection of new inputs that were discovered by other fuzzing processes.</p></li><li><p><code>-jobs</code></p><p>Number of fuzzing jobs to run to completion. Default value is 0, which runs a single fuzzing process until completion. If the value is &gt;= 1, then this number of jobs performing fuzzing are run, in a collection of parallel separate worker processes; each such worker process has its <code>stdout</code>/<code>stderr</code> redirected to <code>fuzz-.log</code>.</p></li><li><p><code>-workers</code></p><p>Number of simultaneous worker processes to run the fuzzing jobs to completion in. If 0 (the default), <code>min(jobs, NumberOfCpuCores()/2)</code> is used.</p></li><li><p><code>-dict</code></p><p>Provide a dictionary of input keywords; see <a href="http://llvm.org/docs/LibFuzzer.html#dictionaries" target="_blank" rel="noopener">Dictionaries</a>.</p></li><li><p><code>-use_counters</code></p><p>Use <a href="http://clang.llvm.org/docs/SanitizerCoverage.html#coverage-counters" target="_blank" rel="noopener">coverage counters</a> to generate approximate counts of how often code blocks are hit; defaults to 1.</p></li><li><p><code>-reduce_inputs</code></p><p>Try to reduce the size of inputs while preserving their full feature sets; defaults to 1.</p></li><li><p><code>-use_value_profile</code></p><p>Use <a href="http://llvm.org/docs/LibFuzzer.html#value-profile" target="_blank" rel="noopener">value profile</a> to guide corpus expansion; defaults to 0.</p></li><li><p><code>-only_ascii</code></p><p>If 1, generate only ASCII (<code>isprint``+``isspace</code>) inputs. Defaults to 0.</p></li><li><p><code>-artifact_prefix</code></p><p>Provide a prefix to use when saving fuzzing artifacts (crash, timeout, or slow inputs) as <code>$(artifact_prefix)file</code>. Defaults to empty.</p></li><li><p><code>-exact_artifact_path</code></p><p>Ignored if empty (the default). If non-empty, write the single artifact on failure (crash, timeout) as <code>$(exact_artifact_path)</code>. This overrides <code>-artifact_prefix</code> and will not use checksum in the file name. Do not use the same path for several parallel processes.</p></li><li><p><code>-print_pcs</code></p><p>If 1, print out newly covered PCs. Defaults to 0.</p></li><li><p><code>-print_final_stats</code></p><p>If 1, print statistics at exit. Defaults to 0.</p></li><li><p><code>-detect_leaks</code></p><p>If 1 (default) and if LeakSanitizer is enabled try to detect memory leaks during fuzzing (i.e. not only at shut down).</p></li><li><p><code>-close_fd_mask</code></p><p>Indicate output streams to close at startup. Be careful, this will remove diagnostic output from target code (e.g. messages on assert failure).0 (default): close neither <code>stdout</code> nor <code>stderr</code>1 : close <code>stdout</code>2 : close <code>stderr</code>3 : close both <code>stdout</code> and <code>stderr</code>.</p></li></ul><p>For the full list of flags run the fuzzer binary with <code>-help=1</code>.</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>During operation the fuzzer prints information to <code>stderr</code>, for example:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">INFO: Seed: 1523017872</span><br><span class="line">INFO: Loaded 1 modules (16 guards): [0x744e60, 0x744ea0),</span><br><span class="line">INFO: -max_len is not provided, using 64</span><br><span class="line">INFO: A corpus is not provided, starting from an empty corpus</span><br><span class="line"><span class="meta">#</span><span class="bash">0    READ units: 1</span></span><br><span class="line"><span class="meta">#</span><span class="bash">1    INITED cov: 3 ft: 2 corp: 1/1b <span class="built_in">exec</span>/s: 0 rss: 24Mb</span></span><br><span class="line"><span class="meta">#</span><span class="bash">3811 NEW    cov: 4 ft: 3 corp: 2/2b <span class="built_in">exec</span>/s: 0 rss: 25Mb L: 1 MS: 5 ChangeBit-ChangeByte-ChangeBit-ShuffleBytes-ChangeByte-</span></span><br><span class="line"><span class="meta">#</span><span class="bash">3827 NEW    cov: 5 ft: 4 corp: 3/4b <span class="built_in">exec</span>/s: 0 rss: 25Mb L: 2 MS: 1 CopyPart-</span></span><br><span class="line"><span class="meta">#</span><span class="bash">3963 NEW    cov: 6 ft: 5 corp: 4/6b <span class="built_in">exec</span>/s: 0 rss: 25Mb L: 2 MS: 2 ShuffleBytes-ChangeBit-</span></span><br><span class="line"><span class="meta">#</span><span class="bash">4167 NEW    cov: 7 ft: 6 corp: 5/9b <span class="built_in">exec</span>/s: 0 rss: 25Mb L: 3 MS: 1 InsertByte-</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>The early parts of the output include information about the fuzzer options and configuration, including the current random seed (in the <code>Seed:</code> line; this can be overridden with the <code>-seed=N</code> flag).</p><hr><p>Further output lines have the form of an event code and statistics. The possible event codes are:</p><ul><li><p><code>READ</code></p><p>The fuzzer has read in all of the provided input samples from the corpus directories. 模糊化器已经从语料库目录中读入了所有提供的输入样本。</p></li><li><p><code>INITED</code></p><p>The fuzzer has <u>completed</u> initialization, which includes running each of the initial input samples through the code under test.</p></li><li><p><code>NEW</code></p><p>The fuzzer has <strong>created a test input</strong> that covers new areas of the code under test. This input will be saved to the primary corpus directory. 覆盖了测试代码的新区域。该输入将被保存到主语料库目录中。</p></li><li><p><code>REDUCE</code></p><p>The fuzzer has found a <strong>better (smaller) input</strong> that triggers previously discovered features (set <code>-reduce_inputs=0</code> to disable).</p></li><li><p><code>pulse</code></p><p>The fuzzer has generated 2n inputs (generated periodically to reassure the user that the fuzzer is still working).</p></li><li><p><code>DONE</code></p><p>The fuzzer has completed operation because it has reached the specified iteration limit (<code>-runs</code>) or time limit (<code>-max_total_time</code>).</p></li><li><p><code>RELOAD</code></p><p>The fuzzer is performing a <strong>periodic</strong> reload of inputs from the corpus directory; this allows it to discover any inputs discovered by other fuzzer processes (see <a href="http://llvm.org/docs/LibFuzzer.html#parallel-fuzzing" target="_blank" rel="noopener">Parallel Fuzzing</a>).</p></li></ul><hr><h4 id="Each-output-line-also-reports-the-following-statistics-when-non-zero"><a href="#Each-output-line-also-reports-the-following-statistics-when-non-zero" class="headerlink" title="Each output line also reports the following statistics (when non-zero):"></a>Each output line also reports the following statistics (when non-zero):</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#0    READ units: 1</span></span><br><span class="line"><span class="comment">#1    INITED cov: 3 ft: 2 corp: 1/1b exec/s: 0 rss: 24Mb</span></span><br><span class="line"><span class="comment">#3811 NEW    cov: 4 ft: 3 corp: 2/2b exec/s: 0 rss: 25Mb L: 1 MS: 5 ChangeBit-ChangeByte-ChangeBit-ShuffleBytes-ChangeByte-</span></span><br><span class="line"><span class="comment">#3827 NEW    cov: 5 ft: 4 corp: 3/4b exec/s: 0 rss: 25Mb L: 2 MS: 1 CopyPart-</span></span><br><span class="line"><span class="comment">#3963 NEW    cov: 6 ft: 5 corp: 4/6b exec/s: 0 rss: 25Mb L: 2 MS: 2 ShuffleBytes-ChangeBit-</span></span><br><span class="line"><span class="comment">#4167 NEW    cov: 7 ft: 6 corp: 5/9b exec/s: 0 rss: 25Mb L: 3 MS: 1 InsertByte-</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">INFO: Seed: 1523017872</span><br><span class="line">INFO: Loaded 1 modules (16 guards): [0x744e60, 0x744ea0),</span><br><span class="line">INFO: -max_len is not provided, using 64</span><br><span class="line">INFO: A corpus is not provided, starting from an empty corpus</span><br><span class="line"><span class="meta">#</span><span class="bash">0    READ units: 1</span></span><br><span class="line"><span class="meta">#</span><span class="bash">1    INITED cov: 3 ft: 2 corp: 1/1b <span class="built_in">exec</span>/s: 0 rss: 24Mb</span></span><br><span class="line"><span class="meta">#</span><span class="bash">3811 NEW    cov: 4 ft: 3 corp: 2/2b <span class="built_in">exec</span>/s: 0 rss: 25Mb L: 1 MS: 5 ChangeBit-ChangeByte-ChangeBit-ShuffleBytes-ChangeByte-</span></span><br><span class="line"><span class="meta">#</span><span class="bash">3827 NEW    cov: 5 ft: 4 corp: 3/4b <span class="built_in">exec</span>/s: 0 rss: 25Mb L: 2 MS: 1 CopyPart-</span></span><br><span class="line"><span class="meta">#</span><span class="bash">3963 NEW    cov: 6 ft: 5 corp: 4/6b <span class="built_in">exec</span>/s: 0 rss: 25Mb L: 2 MS: 2 ShuffleBytes-ChangeBit-</span></span><br><span class="line"><span class="meta">#</span><span class="bash">4167 NEW    cov: 7 ft: 6 corp: 5/9b <span class="built_in">exec</span>/s: 0 rss: 25Mb L: 3 MS: 1 InsertByte-</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Each output line also reports the following statistics (when non-zero):</p><ul><li><p><code>cov:</code></p><p>Total <strong>number of code blocks or edges</strong> covered by executing the current corpus.</p></li><li><p><code>ft:</code></p><p>libFuzzer uses different signals to evaluate the code coverage: edge coverage, edge counters, value profiles, indirect caller/callee pairs, etc. These signals combined are called <strong><em>features</em></strong> (ft:).</p></li><li><p><code>corp:</code></p><p><strong>Number of entries</strong> in the current in-memory test corpus and <strong>its size in bytes.</strong></p></li><li><p><code>lim:</code></p><p>Current limit on the length of new entries in the corpus. Increases over time until the max length (<code>-max_len</code>) is reached.</p></li><li><p><code>exec/s:</code></p><p>Number of fuzzer <strong>iterations per second</strong>.</p></li><li><p><code>rss:</code></p><p>Current <strong>memory consumption</strong>.</p></li></ul><p>For <code>NEW</code> and <code>REDUCE</code> events, the output line also includes information about the mutation operation that produced the new input:</p><ul><li><p><code>L:</code></p><p>Size of the new input in bytes.</p></li><li><p><code>MS:</code></p><p>Count and list of the <strong>mutation operations</strong> used to generate the input.</p></li></ul><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><h4 id="Toy-example"><a href="#Toy-example" class="headerlink" title="Toy example"></a>Toy example</h4><blockquote><p>A simple function that does something interesting if it receives the input “HI!”:</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt; EOF &gt; test_fuzzer.cc</span><br><span class="line"><span class="meta">#</span><span class="bash">include &lt;stdint.h&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">include &lt;stddef.h&gt;</span></span><br><span class="line">extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) &#123;</span><br><span class="line">  if (size &gt; 0 &amp;&amp; data[0] == 'H')</span><br><span class="line">    if (size &gt; 1 &amp;&amp; data[1] == 'I')</span><br><span class="line">       if (size &gt; 2 &amp;&amp; data[2] == '!')</span><br><span class="line">       __builtin_trap();</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">#</span><span class="bash"> Build test_fuzzer.cc with asan and link against libFuzzer.</span></span><br><span class="line">clang++ -fsanitize=address,fuzzer test_fuzzer.cc</span><br><span class="line"><span class="meta">#</span><span class="bash"> Run the fuzzer with no corpus.</span></span><br><span class="line">./a.out</span><br></pre></td></tr></table></figure><p>You should get an error pretty quickly:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">INFO: Seed: 1523017872</span><br><span class="line">INFO: Loaded 1 modules (16 guards): [0x744e60, 0x744ea0),</span><br><span class="line">INFO: -max_len is not provided, using 64</span><br><span class="line">INFO: A corpus is not provided, starting from an empty corpus</span><br><span class="line"><span class="meta">#</span><span class="bash">0    READ units: 1</span></span><br><span class="line"><span class="meta">#</span><span class="bash">1    INITED cov: 3 ft: 2 corp: 1/1b <span class="built_in">exec</span>/s: 0 rss: 24Mb</span></span><br><span class="line"><span class="meta">#</span><span class="bash">3811 NEW    cov: 4 ft: 3 corp: 2/2b <span class="built_in">exec</span>/s: 0 rss: 25Mb L: 1 MS: 5 ChangeBit-ChangeByte-ChangeBit-ShuffleBytes-ChangeByte-</span></span><br><span class="line"><span class="meta">#</span><span class="bash">3827 NEW    cov: 5 ft: 4 corp: 3/4b <span class="built_in">exec</span>/s: 0 rss: 25Mb L: 2 MS: 1 CopyPart-</span></span><br><span class="line"><span class="meta">#</span><span class="bash">3963 NEW    cov: 6 ft: 5 corp: 4/6b <span class="built_in">exec</span>/s: 0 rss: 25Mb L: 2 MS: 2 ShuffleBytes-ChangeBit-</span></span><br><span class="line"><span class="meta">#</span><span class="bash">4167 NEW    cov: 7 ft: 6 corp: 5/9b <span class="built_in">exec</span>/s: 0 rss: 25Mb L: 3 MS: 1 InsertByte-</span></span><br><span class="line">==31511== ERROR: libFuzzer: deadly signal</span><br><span class="line">...</span><br><span class="line">artifact_prefix='./'; Test unit written to ./crash-b13e8756b13a00cf168300179061fb4b91fefbed</span><br></pre></td></tr></table></figure><p>Reference:</p><p>AFL: <a href="http://lcamtuf.coredump.cx/afl/" target="_blank" rel="noopener">http://lcamtuf.coredump.cx/afl/</a></p><p>LibFuzzer: <a href="http://llvm.org/docs/LibFuzzer.html" target="_blank" rel="noopener">http://llvm.org/docs/LibFuzzer.html</a></p><p>PPT <a href="https://www.usenix.org/sites/default/files/conference/protected-files/enigma_slides_serebryany.pdf" target="_blank" rel="noopener">introduction</a><a href="https://www.usenix.org/sites/default/files/conference/protected-files/enigma_slides_serebryany.pdf" target="_blank" rel="noopener">https://www.usenix.org/sites/default/files/conference/protected-files/enigma_slides_serebryany.pdf</a>)</p>]]></content>
      
      
      <categories>
          
          <category> Fuzzing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fuzzing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 2. Project MiCard</title>
      <link href="/2020/02/08/Project-MiCard/"/>
      <url>/2020/02/08/Project-MiCard/</url>
      
        <content type="html"><![CDATA[<h1 id="Business-card"><a href="#Business-card" class="headerlink" title="Business card"></a>Business card</h1><img src="/2020/02/08/Project-MiCard/image-20200208205111281.png" width="30%" title="image-20200208205111281" alt="image-20200208205111281"> 第一眼感觉这个界面是不是蛮好看的，其实用Flutter来做很简单，一起来吧。<a id="more"></a><p>首先，我们看到这个名片是垂直方向呈现的，所以我们将使用<code>Column Class</code>，因为是<strong>Multi-child layout widgets</strong>，所以它的子部件是<code>children</code>,而不是<code>child</code>,因为含多个子部件，所以是其子部件是个List, <code>List&lt;Widget&gt;</code>。</p><h2 id="CircleAvatar"><a href="#CircleAvatar" class="headerlink" title="CircleAvatar"></a>CircleAvatar</h2><p>图片中的头像就是利用该组件的。</p><blockquote><p>小技巧：当光标定位到该组件，同时按下<code>Ctrl+Q</code>就可以查看该组件的一些信息了，比如其可用的性质等</p><p><img src="/2020/02/08/Project-MiCard/image-20200208210254619.png" alt="image-20200208210254619"></p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CircleAvatar(</span><br><span class="line">                radius: <span class="number">50.0</span>,</span><br><span class="line">                backgroundImage: AssetImage(<span class="string">'images/git_portrait.jpg'</span>),</span><br><span class="line">              ),</span><br></pre></td></tr></table></figure><p>此处我们将其半径设为50.0，即设计成圆形。另外我们用<code>AssetImage</code>表示<code>backgroundImage</code>。</p><p>让我们回顾下如何使用<code>AssetImage</code>，首先我们创建一个<code>images</code>的文件夹，然后将下载好的图片放置其中，然后去改动<code>pubspec.yaml</code>文件。</p><p><img src="/2020/02/08/Project-MiCard/image-20200208211101874.png" alt="image-20200208211101874"></p><blockquote><p>注意yaml文件对于缩进很<strong>敏感</strong>呦，规定每个缩进是<strong>两个空格</strong></p></blockquote><h2 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h2><p>下一步就是设计我们的名字啦，我们要用到<code>Text</code>widget，</p><h3 id="TextStyle"><a href="#TextStyle" class="headerlink" title="TextStyle"></a>TextStyle</h3><p>这里用到的属性是<code>style</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Text(</span><br><span class="line">     <span class="string">'Dongyang Yu'</span>,</span><br><span class="line">     style: TextStyle(</span><br><span class="line">     fontSize: <span class="number">40</span>,</span><br><span class="line">     ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><h3 id="字体-fontFamily属性"><a href="#字体-fontFamily属性" class="headerlink" title="字体 fontFamily属性"></a>字体 fontFamily属性</h3><p>推荐去<a href="https://fonts.google.com寻找自己喜欢的字体，此处我选择的是‘Pacifico’" target="_blank" rel="noopener">https://fonts.google.com寻找自己喜欢的字体，此处我选择的是‘Pacifico’</a>.</p><p><img src="/2020/02/08/Project-MiCard/image-20200208211840992.png" alt="image-20200208211840992"></p><p>下载完成后是个压缩包，这时我们再去主目录下新建一个<code>fonts</code>的文件夹，用来存放字体。</p><p><img src="/2020/02/08/Project-MiCard/image-20200208211957292.png" alt="image-20200208211957292"></p><p>接着前往<code>pubspec.yaml</code>文件中添加fonts,老样子还是在<code>flutter</code>下。注意<strong><u>缩进</u></strong>！！</p><p><img src="/2020/02/08/Project-MiCard/image-20200208212159632.png" alt="image-20200208212159632"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">flutter:</span></span><br><span class="line">  <span class="attr">uses-material-design:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">assets:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">images/git_portrait.jpg</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">fonts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">family:</span> <span class="string">Pacifico</span></span><br><span class="line">      <span class="attr">fonts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">asset:</span> <span class="string">fonts/Pacifico-Regular.ttf</span></span><br></pre></td></tr></table></figure><p>之后我们再点击<code>Package get</code>去重新加载。</p><p><img src="/2020/02/08/Project-MiCard/image-20200208212331348.png" alt="image-20200208212331348"></p><p>完成的差不多啦，最后一步是回到<code>main.dart</code>，</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Text(</span><br><span class="line">     <span class="string">'Dongyang Yu'</span>,</span><br><span class="line">     style: TextStyle(</span><br><span class="line">     fontSize: <span class="number">40</span>,</span><br><span class="line">     fontFamily: <span class="string">'Pacifico'</span>,</span><br><span class="line">     color: Colors.blue.shade900,</span><br><span class="line">     ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><blockquote><p>注意，此处字体名要与yaml文件中<code>family</code>后面的名字一致，另外，我们需要<strong>rebuild</strong>我们的project，不然字体不会更新。</p></blockquote><p>另外一行字我选择的是<code>Source Sans Pro</code></p><p>细心的童鞋应该看到，两个字体的颜色我用到了<code>.shade900</code>和<code>[100]</code>这表示是的是颜色的深浅，<u>数字越小，颜色越浅</u>，两种表达都可以。</p><p>还有就是改变字体的粗细，使用的属性是<code>fontWeight</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Text(</span><br><span class="line">     <span class="string">'FLUTTER DEVELOPER'</span>,</span><br><span class="line">     style: TextStyle(</span><br><span class="line">     fontSize: <span class="number">20.0</span>,</span><br><span class="line">     fontFamily: <span class="string">'SourceSansPro'</span>,</span><br><span class="line">     color: Colors.blueAccent[<span class="number">100</span>],</span><br><span class="line">     letterSpacing: <span class="number">2.5</span>,</span><br><span class="line">     fontWeight: FontWeight.bold,</span><br><span class="line">),</span><br></pre></td></tr></table></figure><h2 id="Icon"><a href="#Icon" class="headerlink" title="Icon"></a>Icon</h2><p><img src="/2020/02/08/Project-MiCard/image-20200208213845246.png" alt="image-20200208213845246"></p><p>小图标看起来是不是很可爱~！</p><p>这些图标可以在<a href="https://www.materialpalette.com/选择。" target="_blank" rel="noopener">https://www.materialpalette.com/选择。</a></p><p>这里注意到是图标和字体的结合，需要用到的是<code>Row</code>Widget，但是要将其组合成一个单独的组件，所以我们将<code>Row</code>放在<code>Container</code>里面。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Container(</span><br><span class="line">  child: Row(</span><br><span class="line">    children: &lt;Widget&gt;[</span><br><span class="line">      Icon(</span><br><span class="line">        Icons.phone,</span><br><span class="line">        color: Colors.blue[<span class="number">100</span>],</span><br><span class="line">      ),</span><br><span class="line">      Text(</span><br><span class="line">        <span class="string">'+1 666 666 8888'</span>,</span><br><span class="line">        style: TextStyle(</span><br><span class="line">          color: Colors.blueAccent[<span class="number">900</span>],</span><br><span class="line">          fontSize: <span class="number">20.0</span>,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    ],</span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p><img src="/2020/02/08/Project-MiCard/image-20200208215059019.png" alt="image-20200208215059019"></p><p>图标和号码看起来离得太近，这时候我们加入了啥？</p><h2 id="SizedBox"><a href="#SizedBox" class="headerlink" title="SizedBox"></a>SizedBox</h2><p>在Icon和Text之间插入它就好啦</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SizedBox(</span><br><span class="line">  width: <span class="number">10.0</span>,</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p><img src="/2020/02/08/Project-MiCard/image-20200208215214330.png" alt="image-20200208215214330"></p><p><img src="/2020/02/08/Project-MiCard/image-20200208215407719.png" alt="image-20200208215407719"></p><p>加个背景颜色，看起来太靠左边和上方组件，这时候改怎么办呐？</p><h2 id="EdgeInsets"><a href="#EdgeInsets" class="headerlink" title="EdgeInsets"></a>EdgeInsets</h2><p>我们可以用<code>EdgeInsets</code>来修改margin和padding</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Container(</span><br><span class="line">     margin: EdgeInsets.symmetric(vertical: <span class="number">10.0</span>, horizontal: <span class="number">25.0</span>),</span><br><span class="line">     padding: EdgeInsets.all(<span class="number">10.0</span>),</span><br><span class="line">     color: Colors.white,</span><br><span class="line">    ...</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p><img src="/2020/02/08/Project-MiCard/image-20200208215713993.png" alt="image-20200208215713993"></p><p>同理，下方的邮件部分就交给你们去完成啦。Tips: <code>Icons.email</code></p><p><img src="/2020/02/08/Project-MiCard/image-20200208220107505.png" alt="image-20200208220107505"></p><h2 id="Card-amp-ListTile-widgets"><a href="#Card-amp-ListTile-widgets" class="headerlink" title="Card &amp; ListTile widgets"></a>Card &amp; ListTile widgets</h2><h3 id="Card"><a href="#Card" class="headerlink" title="Card"></a><a href="https://api.flutter.dev/flutter/material/Card-class.html" target="_blank" rel="noopener">Card</a></h3><p>其实Flutter自己就有实现card功能的插件，就叫<code>Card</code></p><p>但是呢，它没有<code>padding</code>属性，<img src="/2020/02/08/Project-MiCard/image-20200208220432085.png" alt="image-20200208220432085"></p><p><img src="/2020/02/08/Project-MiCard/image-20200208220453058.png" alt="image-20200208220453058"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Card(</span><br><span class="line">  margin: EdgeInsets.symmetric(vertical: 10.0, horizontal: 25.0),</span><br><span class="line">  color: Colors.white,</span><br><span class="line">  child: Row(</span><br><span class="line">    children: &lt;Widget&gt;[</span><br><span class="line">      Icon(</span><br><span class="line">        Icons.phone,</span><br><span class="line">        color: Colors.blue[300],</span><br><span class="line">      ),</span><br><span class="line">   ...</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p>这样子看是不是有点挤得慌？</p><p>别急，虽然它不带padding属性，但我们有<code>Padding Class</code>啊！</p><p>我们将<code>Row</code>组件内嵌到一个<code>Padding</code>组件中，注意不是<code>Card</code>组件</p><blockquote><p>Tip: 快捷键<code>Alt+Enter</code>: 可以打开the <strong>Intention Actions</strong> menu 代码提示菜单<img src="/2020/02/08/Project-MiCard/image-20200208221024353.png" alt="image-20200208221024353"></p></blockquote><p>试比较一下</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// here</span></span><br><span class="line">Padding(</span><br><span class="line">    padding: EdgeInsets.all(<span class="number">40.0</span>),</span><br><span class="line">    child: Card(</span><br><span class="line">    margin:</span><br><span class="line">    EdgeInsets.symmetric(vertical: <span class="number">10.0</span>, horizontal: <span class="number">25.0</span>),</span><br><span class="line">    color: Colors.white,</span><br><span class="line">    ...</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p><img src="/2020/02/08/Project-MiCard/image-20200208220824103.png" alt="image-20200208220824103"></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Card(</span><br><span class="line">    margin: EdgeInsets.symmetric(vertical: <span class="number">10.0</span>, horizontal: <span class="number">25.0</span>),</span><br><span class="line">    color: Colors.white,</span><br><span class="line">    <span class="comment">// here</span></span><br><span class="line">    child: Padding(</span><br><span class="line">    padding: EdgeInsets.all(<span class="number">40.0</span>),</span><br><span class="line">    child: Row(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">        Icon(</span><br><span class="line">        Icons.phone,</span><br><span class="line">    ...</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p><img src="/2020/02/08/Project-MiCard/image-20200208221140528.png" alt="image-20200208221140528"></p><p>大家看到差别了吗，差别就是改变的事Card和Row之间的padding内边距</p><h3 id="ListTiles"><a href="#ListTiles" class="headerlink" title="ListTiles"></a><a href="https://api.flutter.dev/flutter/material/ListTile-class.html" target="_blank" rel="noopener">ListTiles</a></h3><p>查看Flutter 文档，发现<code>ListTile</code>: <strong>display icons and text in a card</strong>。 这不符合我们的要求吗！太棒了。</p><p>格式:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Card(</span><br><span class="line">  child: ListTile(</span><br><span class="line">    leading: FlutterLogo(),</span><br><span class="line">    title: Text(<span class="string">'One-line with leading widget'</span>),</span><br><span class="line">  ),</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Card(</span><br><span class="line">  margin: EdgeInsets.symmetric(vertical: <span class="number">10.0</span>, horizontal: <span class="number">25.0</span>),</span><br><span class="line">  color: Colors.white,</span><br><span class="line">  child: ListTile(</span><br><span class="line">    leading: Icon(</span><br><span class="line">      Icons.phone,</span><br><span class="line">      color: Colors.blue[<span class="number">300</span>],</span><br><span class="line">    ),</span><br><span class="line">    title: Text(</span><br><span class="line">      <span class="string">'+1 666 666 8888'</span>,</span><br><span class="line">      style: TextStyle(</span><br><span class="line">        color: Colors.blueAccent[<span class="number">900</span>],</span><br><span class="line">        fontSize: <span class="number">20.0</span>,</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p>成果图如下，就连SizedBox也省去了，真强大！</p><p><img src="/2020/02/08/Project-MiCard/image-20200208222231766.png" alt="image-20200208222231766"></p><h2 id="垂直水平居中"><a href="#垂直水平居中" class="headerlink" title="垂直水平居中"></a>垂直水平居中</h2><p>还记得上篇博文中的几个column的性质吗？</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">crossAxisAlignment: CrossAxisAlignment.center,</span><br></pre></td></tr></table></figure><p>这两行代码一加，居中问题搞定！</p><p><img src="/2020/02/08/Project-MiCard/image-20200208222812770.png" alt="image-20200208222812770"></p><h2 id="画龙点睛"><a href="#画龙点睛" class="headerlink" title="画龙点睛"></a>画龙点睛</h2><p>如果我想把上方的文字和下方的两行信息分割开来，我们当然可以用<code>SizedBox</code></p><p>但是还记得水平线<u>horizontal line</u>不？同样的，Flutter里面也有，叫做<code>Divider Class</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SizedBox(</span><br><span class="line">  height: <span class="number">20.0</span>,</span><br><span class="line">  width: <span class="number">150.0</span>,</span><br><span class="line">  child: Divider(</span><br><span class="line">    color: Colors.teal.shade50,</span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p><img src="/2020/02/08/Project-MiCard/image-20200208223434708.png" alt="image-20200208223434708"></p><p>哎哟，不错哦~感觉更正式了。</p><h1 id="Recommended-website"><a href="#Recommended-website" class="headerlink" title="Recommended website"></a>Recommended website</h1><ul><li><p>字体网站: <a href="https://fonts.google.com" target="_blank" rel="noopener">https://fonts.google.com</a> :free for commercial use</p></li><li><p>图标网站: <a href="https://material.io/resources/icons/?style=baseline" target="_blank" rel="noopener">https://material.io/resources/icons/?style=baseline</a></p><ul><li>[推荐]网站：<a href="https://www.materialpalette.com/" target="_blank" rel="noopener">https://www.materialpalette.com/</a></li></ul></li></ul><h1 id="Shortcuts"><a href="#Shortcuts" class="headerlink" title="Shortcuts:"></a>Shortcuts:</h1><p><code>Alt+Enter</code>: pull up the Intention Actions menu 代码提示菜单</p><p><code>Ctrl+Q</code>: quick documentation lookup 快速查看文档</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.linkedin.com/learning/flutter-part-03-flutter-widgets" target="_blank" rel="noopener">https://www.linkedin.com/learning/flutter-part-03-flutter-widgets</a></p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Widgets </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 2. Project MiCard</title>
      <link href="/2020/02/08/Flutter-Project-MiCard/"/>
      <url>/2020/02/08/Flutter-Project-MiCard/</url>
      
        <content type="html"><![CDATA[<h1 id="Business-card"><a href="#Business-card" class="headerlink" title="Business card"></a>Business card</h1><img src="/2020/02/08/Flutter-Project-MiCard/image-20200208205111281.png" width="30%" title="image-20200208205111281" alt="image-20200208205111281"> 第一眼感觉这个界面是不是蛮好看的，其实用Flutter来做很简单，一起来吧。<a id="more"></a><p>首先，我们看到这个名片是垂直方向呈现的，所以我们将使用<code>Column Class</code>，因为是<strong>Multi-child layout widgets</strong>，所以它的子部件是<code>children</code>,而不是<code>child</code>,因为含多个子部件，所以是其子部件是个List, <code>List&lt;Widget&gt;</code>。</p><h2 id="CircleAvatar"><a href="#CircleAvatar" class="headerlink" title="CircleAvatar"></a>CircleAvatar</h2><p>图片中的头像就是利用该组件的。</p><blockquote><p>小技巧：当光标定位到该组件，同时按下<code>Ctrl+Q</code>就可以查看该组件的一些信息了，比如其可用的性质等</p><p><img src="/2020/02/08/Flutter-Project-MiCard/image-20200208210254619.png" alt="image-20200208210254619"></p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CircleAvatar(</span><br><span class="line">                radius: <span class="number">50.0</span>,</span><br><span class="line">                backgroundImage: AssetImage(<span class="string">'images/git_portrait.jpg'</span>),</span><br><span class="line">              ),</span><br></pre></td></tr></table></figure><p>此处我们将其半径设为50.0，即设计成圆形。另外我们用<code>AssetImage</code>表示<code>backgroundImage</code>。</p><p>让我们回顾下如何使用<code>AssetImage</code>，首先我们创建一个<code>images</code>的文件夹，然后将下载好的图片放置其中，然后去改动<code>pubspec.yaml</code>文件。</p><p><img src="/2020/02/08/Flutter-Project-MiCard/image-20200208211101874.png" alt="image-20200208211101874"></p><blockquote><p>注意yaml文件对于缩进很<strong>敏感</strong>呦，规定每个缩进是<strong>两个空格</strong></p></blockquote><h2 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h2><p>下一步就是设计我们的名字啦，我们要用到<code>Text</code>widget，</p><h3 id="TextStyle"><a href="#TextStyle" class="headerlink" title="TextStyle"></a>TextStyle</h3><p>这里用到的属性是<code>style</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Text(</span><br><span class="line">     <span class="string">'Dongyang Yu'</span>,</span><br><span class="line">     style: TextStyle(</span><br><span class="line">     fontSize: <span class="number">40</span>,</span><br><span class="line">     ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><h3 id="字体-fontFamily属性"><a href="#字体-fontFamily属性" class="headerlink" title="字体 fontFamily属性"></a>字体 fontFamily属性</h3><p>推荐去<a href="https://fonts.google.com寻找自己喜欢的字体，此处我选择的是‘Pacifico’" target="_blank" rel="noopener">https://fonts.google.com寻找自己喜欢的字体，此处我选择的是‘Pacifico’</a>.</p><p><img src="/2020/02/08/Flutter-Project-MiCard/image-20200208211840992.png" alt="image-20200208211840992"></p><p>下载完成后是个压缩包，这时我们再去主目录下新建一个<code>fonts</code>的文件夹，用来存放字体。</p><p><img src="/2020/02/08/Flutter-Project-MiCard/image-20200208211957292.png" alt="image-20200208211957292"></p><p>接着前往<code>pubspec.yaml</code>文件中添加fonts,老样子还是在<code>flutter</code>下。注意<strong><u>缩进</u></strong>！！</p><p><img src="/2020/02/08/Flutter-Project-MiCard/image-20200208212159632.png" alt="image-20200208212159632"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">flutter:</span></span><br><span class="line">  <span class="attr">uses-material-design:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">assets:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">images/git_portrait.jpg</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">fonts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">family:</span> <span class="string">Pacifico</span></span><br><span class="line">      <span class="attr">fonts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">asset:</span> <span class="string">fonts/Pacifico-Regular.ttf</span></span><br></pre></td></tr></table></figure><p>之后我们再点击<code>Package get</code>去重新加载。</p><p><img src="/2020/02/08/Flutter-Project-MiCard/image-20200208212331348.png" alt="image-20200208212331348"></p><p>完成的差不多啦，最后一步是回到<code>main.dart</code>，</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Text(</span><br><span class="line">     <span class="string">'Dongyang Yu'</span>,</span><br><span class="line">     style: TextStyle(</span><br><span class="line">     fontSize: <span class="number">40</span>,</span><br><span class="line">     fontFamily: <span class="string">'Pacifico'</span>,</span><br><span class="line">     color: Colors.blue.shade900,</span><br><span class="line">     ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><blockquote><p>注意，此处字体名要与yaml文件中<code>family</code>后面的名字一致，另外，我们需要<strong>rebuild</strong>我们的project，不然字体不会更新。</p></blockquote><p>另外一行字我选择的是<code>Source Sans Pro</code></p><p>细心的童鞋应该看到，两个字体的颜色我用到了<code>.shade900</code>和<code>[100]</code>这表示是的是颜色的深浅，<u>数字越小，颜色越浅</u>，两种表达都可以。</p><p>还有就是改变字体的粗细，使用的属性是<code>fontWeight</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Text(</span><br><span class="line">     <span class="string">'FLUTTER DEVELOPER'</span>,</span><br><span class="line">     style: TextStyle(</span><br><span class="line">     fontSize: <span class="number">20.0</span>,</span><br><span class="line">     fontFamily: <span class="string">'SourceSansPro'</span>,</span><br><span class="line">     color: Colors.blueAccent[<span class="number">100</span>],</span><br><span class="line">     letterSpacing: <span class="number">2.5</span>,</span><br><span class="line">     fontWeight: FontWeight.bold,</span><br><span class="line">),</span><br></pre></td></tr></table></figure><h2 id="Icon"><a href="#Icon" class="headerlink" title="Icon"></a>Icon</h2><p><img src="/2020/02/08/Flutter-Project-MiCard/image-20200208213845246.png" alt="image-20200208213845246"></p><p>小图标看起来是不是很可爱~！</p><p>这些图标可以在<a href="https://www.materialpalette.com/选择。" target="_blank" rel="noopener">https://www.materialpalette.com/选择。</a></p><p>这里注意到是图标和字体的结合，需要用到的是<code>Row</code>Widget，但是要将其组合成一个单独的组件，所以我们将<code>Row</code>放在<code>Container</code>里面。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Container(</span><br><span class="line">  child: Row(</span><br><span class="line">    children: &lt;Widget&gt;[</span><br><span class="line">      Icon(</span><br><span class="line">        Icons.phone,</span><br><span class="line">        color: Colors.blue[<span class="number">100</span>],</span><br><span class="line">      ),</span><br><span class="line">      Text(</span><br><span class="line">        <span class="string">'+1 666 666 8888'</span>,</span><br><span class="line">        style: TextStyle(</span><br><span class="line">          color: Colors.blueAccent[<span class="number">900</span>],</span><br><span class="line">          fontSize: <span class="number">20.0</span>,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    ],</span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p><img src="/2020/02/08/Flutter-Project-MiCard/image-20200208215059019.png" alt="image-20200208215059019"></p><p>图标和号码看起来离得太近，这时候我们加入了啥？</p><h2 id="SizedBox"><a href="#SizedBox" class="headerlink" title="SizedBox"></a>SizedBox</h2><p>在Icon和Text之间插入它就好啦</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SizedBox(</span><br><span class="line">  width: <span class="number">10.0</span>,</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p><img src="/2020/02/08/Flutter-Project-MiCard/image-20200208215214330.png" alt="image-20200208215214330"></p><p><img src="/2020/02/08/Flutter-Project-MiCard/image-20200208215407719.png" alt="image-20200208215407719"></p><p>加个背景颜色，看起来太靠左边和上方组件，这时候改怎么办呐？</p><h2 id="EdgeInsets"><a href="#EdgeInsets" class="headerlink" title="EdgeInsets"></a>EdgeInsets</h2><p>我们可以用<code>EdgeInsets</code>来修改margin和padding</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Container(</span><br><span class="line">     margin: EdgeInsets.symmetric(vertical: <span class="number">10.0</span>, horizontal: <span class="number">25.0</span>),</span><br><span class="line">     padding: EdgeInsets.all(<span class="number">10.0</span>),</span><br><span class="line">     color: Colors.white,</span><br><span class="line">    ...</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p><img src="/2020/02/08/Flutter-Project-MiCard/image-20200208215713993.png" alt="image-20200208215713993"></p><p>同理，下方的邮件部分就交给你们去完成啦。Tips: <code>Icons.email</code></p><p><img src="/2020/02/08/Flutter-Project-MiCard/image-20200208220107505.png" alt="image-20200208220107505"></p><h2 id="Card-amp-ListTile-widgets"><a href="#Card-amp-ListTile-widgets" class="headerlink" title="Card &amp; ListTile widgets"></a>Card &amp; ListTile widgets</h2><h3 id="Card"><a href="#Card" class="headerlink" title="Card"></a><a href="https://api.flutter.dev/flutter/material/Card-class.html" target="_blank" rel="noopener">Card</a></h3><p>其实Flutter自己就有实现card功能的插件，就叫<code>Card</code></p><p>但是呢，它没有<code>padding</code>属性，<img src="/2020/02/08/Flutter-Project-MiCard/image-20200208220432085.png" alt="image-20200208220432085"></p><p><img src="/2020/02/08/Flutter-Project-MiCard/image-20200208220453058.png" alt="image-20200208220453058"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Card(</span><br><span class="line">  margin: EdgeInsets.symmetric(vertical: 10.0, horizontal: 25.0),</span><br><span class="line">  color: Colors.white,</span><br><span class="line">  child: Row(</span><br><span class="line">    children: &lt;Widget&gt;[</span><br><span class="line">      Icon(</span><br><span class="line">        Icons.phone,</span><br><span class="line">        color: Colors.blue[300],</span><br><span class="line">      ),</span><br><span class="line">   ...</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p>这样子看是不是有点挤得慌？</p><p>别急，虽然它不带padding属性，但我们有<code>Padding Class</code>啊！</p><p>我们将<code>Row</code>组件内嵌到一个<code>Padding</code>组件中，注意不是<code>Card</code>组件</p><blockquote><p>Tip: 快捷键<code>Alt+Enter</code>: 可以打开the <strong>Intention Actions</strong> menu 代码提示菜单<img src="/2020/02/08/Flutter-Project-MiCard/image-20200208221024353.png" alt="image-20200208221024353"></p></blockquote><p>试比较一下</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// here</span></span><br><span class="line">Padding(</span><br><span class="line">    padding: EdgeInsets.all(<span class="number">40.0</span>),</span><br><span class="line">    child: Card(</span><br><span class="line">    margin:</span><br><span class="line">    EdgeInsets.symmetric(vertical: <span class="number">10.0</span>, horizontal: <span class="number">25.0</span>),</span><br><span class="line">    color: Colors.white,</span><br><span class="line">    ...</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p><img src="/2020/02/08/Flutter-Project-MiCard/image-20200208220824103.png" alt="image-20200208220824103"></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Card(</span><br><span class="line">    margin: EdgeInsets.symmetric(vertical: <span class="number">10.0</span>, horizontal: <span class="number">25.0</span>),</span><br><span class="line">    color: Colors.white,</span><br><span class="line">    <span class="comment">// here</span></span><br><span class="line">    child: Padding(</span><br><span class="line">    padding: EdgeInsets.all(<span class="number">40.0</span>),</span><br><span class="line">    child: Row(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">        Icon(</span><br><span class="line">        Icons.phone,</span><br><span class="line">    ...</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p><img src="/2020/02/08/Flutter-Project-MiCard/image-20200208221140528.png" alt="image-20200208221140528"></p><p>大家看到差别了吗，差别就是改变的事Card和Row之间的padding内边距</p><h3 id="ListTiles"><a href="#ListTiles" class="headerlink" title="ListTiles"></a><a href="https://api.flutter.dev/flutter/material/ListTile-class.html" target="_blank" rel="noopener">ListTiles</a></h3><p>查看Flutter 文档，发现<code>ListTile</code>: <strong>display icons and text in a card</strong>。 这不符合我们的要求吗！太棒了。</p><p>格式:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Card(</span><br><span class="line">  child: ListTile(</span><br><span class="line">    leading: FlutterLogo(),</span><br><span class="line">    title: Text(<span class="string">'One-line with leading widget'</span>),</span><br><span class="line">  ),</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Card(</span><br><span class="line">  margin: EdgeInsets.symmetric(vertical: <span class="number">10.0</span>, horizontal: <span class="number">25.0</span>),</span><br><span class="line">  color: Colors.white,</span><br><span class="line">  child: ListTile(</span><br><span class="line">    leading: Icon(</span><br><span class="line">      Icons.phone,</span><br><span class="line">      color: Colors.blue[<span class="number">300</span>],</span><br><span class="line">    ),</span><br><span class="line">    title: Text(</span><br><span class="line">      <span class="string">'+1 666 666 8888'</span>,</span><br><span class="line">      style: TextStyle(</span><br><span class="line">        color: Colors.blueAccent[<span class="number">900</span>],</span><br><span class="line">        fontSize: <span class="number">20.0</span>,</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p>成果图如下，就连SizedBox也省去了，真强大！</p><p><img src="/2020/02/08/Flutter-Project-MiCard/image-20200208222231766.png" alt="image-20200208222231766"></p><h2 id="垂直水平居中"><a href="#垂直水平居中" class="headerlink" title="垂直水平居中"></a>垂直水平居中</h2><p>还记得上篇博文中的几个column的性质吗？</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">crossAxisAlignment: CrossAxisAlignment.center,</span><br></pre></td></tr></table></figure><p>这两行代码一加，居中问题搞定！</p><p><img src="/2020/02/08/Flutter-Project-MiCard/image-20200208222812770.png" alt="image-20200208222812770"></p><h2 id="画龙点睛"><a href="#画龙点睛" class="headerlink" title="画龙点睛"></a>画龙点睛</h2><p>如果我想把上方的文字和下方的两行信息分割开来，我们当然可以用<code>SizedBox</code></p><p>但是还记得水平线<u>horizontal line</u>不？同样的，Flutter里面也有，叫做<code>Divider Class</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SizedBox(</span><br><span class="line">  height: <span class="number">20.0</span>,</span><br><span class="line">  width: <span class="number">150.0</span>,</span><br><span class="line">  child: Divider(</span><br><span class="line">    color: Colors.teal.shade50,</span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p><img src="/2020/02/08/Flutter-Project-MiCard/image-20200208223434708.png" alt="image-20200208223434708"></p><p>哎哟，不错哦~感觉更正式了。</p><h1 id="Recommended-website"><a href="#Recommended-website" class="headerlink" title="Recommended website"></a>Recommended website</h1><ul><li><p>字体网站: <a href="https://fonts.google.com" target="_blank" rel="noopener">https://fonts.google.com</a> :free for commercial use</p></li><li><p>图标网站: <a href="https://material.io/resources/icons/?style=baseline" target="_blank" rel="noopener">https://material.io/resources/icons/?style=baseline</a></p><ul><li>[推荐]网站：<a href="https://www.materialpalette.com/" target="_blank" rel="noopener">https://www.materialpalette.com/</a></li></ul></li></ul><h1 id="Shortcuts"><a href="#Shortcuts" class="headerlink" title="Shortcuts:"></a>Shortcuts:</h1><p><code>Alt+Enter</code>: pull up the Intention Actions menu 代码提示菜单</p><p><code>Ctrl+Q</code>: quick documentation lookup 快速查看文档</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.linkedin.com/learning/flutter-part-03-flutter-widgets" target="_blank" rel="noopener">https://www.linkedin.com/learning/flutter-part-03-flutter-widgets</a></p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Widgets </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS249 General Usage Rubric</title>
      <link href="/2020/02/07/CS249-General-Usage-Rubric/"/>
      <url>/2020/02/07/CS249-General-Usage-Rubric/</url>
      
        <content type="html"><![CDATA[<p>今天我来和大家聊聊CS249 GUR的扣分点，是不是又很多同学第一次Project方法差不多都实现了，但是因为规范被扣到了负分？哈哈哈，第一次我也差不多和你们一样，作为T.A (Teaching assistant) 现在我来和大家唠唠这扣分点到底在哪。</p><a id="more"></a><ol><li><h1 id="use-of-non-self-documenting-or-single-letter-variable-1-per-declaration-or-use"><a href="#use-of-non-self-documenting-or-single-letter-variable-1-per-declaration-or-use" class="headerlink" title="use of non-self-documenting or single-letter variable: -1 per declaration or use"></a>use of non-self-documenting or single-letter variable: <strong>-1</strong> per declaration or use</h1><p>什么叫non-self-documenting variable呢？self-documenting，顾名思义，就是你自己定义的，可能别人不太理解的，特别是<strong>单字母变量</strong>，什么<code>i, j, k</code>啊，国内都这么定义，但是我们的Michael教授就觉得这点特别不好，影响了代码的可读性(readability)。所以大家最好用<u>单词</u>作为变量名，比如</p><p><code>index, lowWorkingIndex, highWorkingIndex, searchIndex</code>等等。</p></li><li><h1 id="missing-or-non-aligned-curly-braces-1-per-pair-occasion"><a href="#missing-or-non-aligned-curly-braces-1-per-pair-occasion" class="headerlink" title="missing or non-aligned curly braces: -1 per pair/occasion"></a>missing or non-aligned curly braces: <strong>-1</strong> per pair/occasion</h1><p>这个应该很好理解，就是<strong>花括号不对齐</strong>，要扣分！你说，我就是不想对齐，那没办法，教授就是这么规定的，我觉得下面这段代码的格式也不错啊。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">keepInMind</span> </span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">              System.out.println(<span class="string">"Hello World"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但下面这段代码是不是看起来更容易看出代码块呢。所以大家就将下面的格式作为标准，去执行它。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">keepInMind</span> </span></span><br><span class="line"><span class="class">   </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>当把上面两点给做到，就基本上不会扣除规范分了</strong>。</p></li><li><h1 id="redundant-boolean-test-1-per-occasion"><a href="#redundant-boolean-test-1-per-occasion" class="headerlink" title="redundant boolean test: -1 per occasion"></a>redundant boolean test: -1 per occasion</h1><p>a. e.g., <code>if( &lt;boolean expression&gt; == true )</code></p><p>b. e.g., <code>if( &lt;boolean expression&gt; == false )</code></p><p>不要写<strong>多余</strong>的代码，尽量精简。虽然什么两个例子没有语法错误，但确实是多余的</p><p>直接用下面的代替</p><p><code>if( &lt;boolean expression&gt; )</code></p><p><code>if( !&lt;boolean expression&gt; )</code></p></li><li><h1 id="second-or-subsequent-if-statement-that-should-logically-be-else-2-per-occasion"><a href="#second-or-subsequent-if-statement-that-should-logically-be-else-2-per-occasion" class="headerlink" title="second, or subsequent, if statement that should logically be else: -2 per occasion"></a>second, or subsequent, if statement that should logically be else: <strong>-2</strong> per occasion</h1><blockquote><p>“Talk is cheap. Show me the code.” —Linus Torvalds</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( num &lt; <span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">    <span class="comment">// statements </span></span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( num &gt;= <span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">    <span class="comment">// statements </span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>大家觉得上面这段代码有没有毛病呢？乍一看没什么问题，但定睛一看，发现这边的<code>else if</code>是画蛇添足的，直接 <code>else</code>不就行了么。但屏幕前的你千万别笑，说不定什么时候你就犯这错误了。别问我怎么知道的……</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( num &lt; <span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">    <span class="comment">// statements </span></span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">else</span> ( num &gt;= <span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">    <span class="comment">// statements </span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><h1 id="any-data-state-change-in-array-brackets-or-in-method-parameters-2-per-occasion"><a href="#any-data-state-change-in-array-brackets-or-in-method-parameters-2-per-occasion" class="headerlink" title="any data/state change in array brackets or in method parameters: -2 per occasion"></a>any data/state change in array brackets or in method parameters: <strong>-2</strong> per occasion</h1><p>a. e.g., value = array[ index++ ];<br>b. e.g., value = someMethod( otherValue, myValue– );<br>c. note: array[ index + 1 ] or someMethod( otherValue, myValue – 1 ) are appropriate and acceptable</p><p><strong>不要</strong>在数组的<u>括号</u>或者<u>方法参数</u>中修改任何的数据</p><p>最好改成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">value = array[ index ];</span><br><span class="line">index++;</span><br></pre></td></tr></table></figure><p>记住就好，有的东西不需要去深究为什么(我懒得打了，哈哈哈)</p></li><li><h1 id="declaration-of-variable-within-any-loop-2-per-occasion"><a href="#declaration-of-variable-within-any-loop-2-per-occasion" class="headerlink" title="declaration of variable within any loop: -2 per occasion"></a>declaration of variable within any loop: <strong>-2</strong> per occasion</h1><p>a. e.g., for( int index = 0; … )</p><p>b. e.g.,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>( someCondition ) </span><br><span class="line">   &#123;</span><br><span class="line">    <span class="keyword">int</span> newValue = someValue;</span><br><span class="line">    ...</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><code>Object obj = new Object();</code>写在100个循环内等于你有<strong>100个引用</strong>对应了100个对象，所以100个对象在一段时间内都是会<strong>占用内存</strong>，直到内存不足Garbage Collection主动回收</p><p><code>obj = new Object();</code> 写在100个循环内等于你使用<strong>1个引用</strong>分别100次调用了100个对象，所以当后一个对象初始化后，前一个对象已经是“无引用状态”，会很快的被GC自动回收</p><p>这就是区别。</p><p>Tip: 最好把所有的变量声明都在方法的开头，增加<strong>可读性</strong></p></li><li><h1 id="use-of-incomplete-for-loop-e-g-for-index-lt-5-index-2-per-occasion"><a href="#use-of-incomplete-for-loop-e-g-for-index-lt-5-index-2-per-occasion" class="headerlink" title="use of incomplete for loop (e.g., for( ; index &lt; 5; index++ )): -2 per occasion"></a>use of incomplete for loop (e.g., for( ; index &lt; 5; index++ )): <strong>-2</strong> per occasion</h1><p>for循环里的表达式不要空着</p><p>如果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( ; index &lt; <span class="number">5</span>; index++ )</span><br><span class="line">   &#123;</span><br><span class="line">    <span class="comment">// statements</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>最好改成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> index;</span><br><span class="line"><span class="keyword">for</span> ( index = <span class="number">0</span>; index &lt; <span class="number">5</span>; index++ )</span><br><span class="line">   &#123;</span><br><span class="line">    <span class="comment">// statements</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>增加可读性</strong></p></li><li><h1 id="use-of-if-else-in-place-of-single-Boolean-return-statement-2-per-occasion"><a href="#use-of-if-else-in-place-of-single-Boolean-return-statement-2-per-occasion" class="headerlink" title="use of if/else in place of single Boolean return statement: -2 per occasion"></a>use of if/else in place of single Boolean return statement: <strong>-2</strong> per occasion</h1><p>举个例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> resulte = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span>(result == <span class="keyword">true</span>)</span><br><span class="line">   &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> (result);</span><br></pre></td></tr></table></figure><p>看到区别了吗？一行代码可以解决的事，为什么要用七八行呢？</p></li><li><h1 id="any-code-on-the-same-line-as-a-curly-brace-2-per-occasion"><a href="#any-code-on-the-same-line-as-a-curly-brace-2-per-occasion" class="headerlink" title="any code on the same line as a curly brace: -2 per occasion"></a>any code on the same line as a curly brace: <strong>-2</strong> per occasion</h1><p>不要把代码和花括号放在同一行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">   </span>&#123; System.out.println(<span class="string">"Hello World"</span>); &#125;</span><br><span class="line">   <span class="comment">// 改成</span></span><br><span class="line">   &#123;</span><br><span class="line">    System.out.println(<span class="string">"Hello World"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><h1 id="use-of-1-or-0-or-any-other-numbers-in-place-of-true-or-false-2-per-occasion"><a href="#use-of-1-or-0-or-any-other-numbers-in-place-of-true-or-false-2-per-occasion" class="headerlink" title="use of 1 or 0 (or any other numbers) in place of true or false: -2 per occasion"></a>use of 1 or 0 (or any other numbers) in place of true or false: <strong>-2</strong> per occasion</h1><p>这个很简单，不要用1和0去代替true和false，虽然可行，但不要这么做。</p></li><li><h1 id="use-of-literals-e-g-ints-chars-etc-when-constants-should-be-used-2-per-occasion"><a href="#use-of-literals-e-g-ints-chars-etc-when-constants-should-be-used-2-per-occasion" class="headerlink" title="use of literals (e.g., ints, chars, etc.) when constants should be used: -2 per occasion"></a>use of literals (e.g., ints, chars, etc.) when constants should be used: <strong>-2</strong> per occasion</h1><p>比如给定了常量, 那么在之后需要用到它的时候，不要用数字去代替它，举例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayClass</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">   localArray = <span class="keyword">new</span> <span class="keyword">int</span>[ <span class="number">10</span> ];</span><br><span class="line">        </span><br><span class="line">   arrayCapacity = <span class="number">10</span>;</span><br><span class="line">        </span><br><span class="line">   arraySize = <span class="number">0</span>;  </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>千万不要这么写</strong>！！！改成下面的形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayClass</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">   localArray = <span class="keyword">new</span> <span class="keyword">int</span>[ DEFAULT_CAPACITY ];</span><br><span class="line">        </span><br><span class="line">   arrayCapacity = DEFAULT_CAPACITY;</span><br><span class="line">        </span><br><span class="line">   arraySize = <span class="number">0</span>;  </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>因为如果当别人要理解你的代码，看到这个神奇的数字 (magic number)10,还要在你的代码中去寻找10代表什么，这么一来二去，就<u>浪费了很多时间</u></p></li><li><h1 id="use-of-break-anywhere-but-in-a-switch-operation-2-per-occasion"><a href="#use-of-break-anywhere-but-in-a-switch-operation-2-per-occasion" class="headerlink" title="use of break anywhere but in a switch operation: -2 per occasion"></a>use of <code>break</code> anywhere but in a switch operation: <strong>-2</strong> per occasion</h1><p>这句话意识是除了switch语句，其他地方一律不准用``break<code>。教授说如果你这个地方要用</code>break`，说明你的<strong>逻辑</strong>还不清楚</p></li><li><h1 id="use-of-unspecified-try-catch-2-per-occasion"><a href="#use-of-unspecified-try-catch-2-per-occasion" class="headerlink" title="use of unspecified try/catch: -2 per occasion"></a>use of unspecified try/catch: <strong>-2</strong> per occasion</h1><p>不要使用该语句去捕获异常。</p></li><li><h1 id="use-of-continue-anywhere-3-per-occasion"><a href="#use-of-continue-anywhere-3-per-occasion" class="headerlink" title="use of continue anywhere: -3 per occasion"></a>use of <code>continue</code> anywhere: <strong>-3</strong> per occasion</h1><p>同12中<code>break</code>，用它说明你逻辑还不清楚</p></li><li><h1 id="any-I-O-in-a-method-not-specified-for-I-O-operations-3-per-occasion"><a href="#any-I-O-in-a-method-not-specified-for-I-O-operations-3-per-occasion" class="headerlink" title="any I/O in a method not specified for I/O operations: -3 per occasion"></a>any I/O in a method not specified for I/O operations: <strong>-3</strong> per occasion</h1><p>任何没有明确指出需要输入输出 (input/output)的地方，不要用</p></li><li><h1 id="use-of-methods-in-parameter-argument-lists-3-per-occasion"><a href="#use-of-methods-in-parameter-argument-lists-3-per-occasion" class="headerlink" title="use of methods in parameter/argument lists: -3 per occasion"></a>use of methods in parameter/argument lists: <strong>-3</strong> per occasion</h1></li><li><h1 id="use-of-methods-in-array-brackets-3-per-occasion"><a href="#use-of-methods-in-array-brackets-3-per-occasion" class="headerlink" title="use of methods in array brackets: -3 per occasion"></a>use of methods in array brackets: <strong>-3</strong> per occasion</h1><p>不要在方法参数或数组里调用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">array[getNumber(input)];</span><br><span class="line"></span><br><span class="line"><span class="comment">//改成</span></span><br><span class="line"></span><br><span class="line">num = getNumber(input);</span><br><span class="line">array[num];</span><br></pre></td></tr></table></figure><p>先赋值给一个变量，再去使用，目的也是为了增加可读性，另外保证一行代码不要过长</p></li><li><h1 id="creation-or-use-of-empty-if-or-else-blocks-3-per-occasion"><a href="#creation-or-use-of-empty-if-or-else-blocks-3-per-occasion" class="headerlink" title="creation or use of empty if or else blocks: -3 per occasion"></a>creation or use of empty if or else blocks: <strong>-3</strong> per occasion</h1><p>不要创建货使用空的if else语句</p></li><li><h1 id="placement-of-main-method-in-any-ADT-class-3-per-occasion"><a href="#placement-of-main-method-in-any-ADT-class-3-per-occasion" class="headerlink" title="placement of main method in any ADT class: -3 per occasion"></a>placement of main method in any ADT class: <strong>-3</strong> per occasion</h1><p>不要在抽象数据类里放主方法</p></li><li><h1 id="code-more-than-80-characters-3-per-five-lines"><a href="#code-more-than-80-characters-3-per-five-lines" class="headerlink" title="code more than 80 characters: -3 per five lines"></a>code more than 80 characters: <strong>-3</strong> per five lines</h1><p>正如我在17中提到的，避免代码过长，这里要求少于80个字符长度，为的是不需要水平移动去看代码</p></li><li><h1 id="use-of-ternary-operator-3-per-occasion"><a href="#use-of-ternary-operator-3-per-occasion" class="headerlink" title="use of ternary operator: -3 per occasion"></a>use of ternary operator: <strong>-3</strong> per occasion</h1><p>不要使用三元运算符</p></li></ol><p>可算打完了，希望大家在写完代码的时候就来对照下GUR，将能拿的分全拿到！最后都拿A！冲冲冲~</p>]]></content>
      
      
      <categories>
          
          <category> Data Structure </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 1. Widgets</title>
      <link href="/2020/02/04/Flutter-Introduction/"/>
      <url>/2020/02/04/Flutter-Introduction/</url>
      
        <content type="html"><![CDATA[<h1 id="Hot-Reload"><a href="#Hot-Reload" class="headerlink" title="Hot Reload"></a>Hot Reload</h1><p>For <strong>Hot Reload</strong> to work, we have to have the things that we’ve changed <strong>inside</strong> a Flutter <strong>stateless</strong> or <strong>stateful</strong> widget.</p><p><strong>It only looks at the changes that were made.</strong> So, size of project doesn’t matter.</p><a id="more"></a><blockquote><p>Hot Reload is default to happen when you save your project.</p></blockquote><p><img src="/2020/02/04/Flutter-Introduction/image-20200203105741240-1580805908362.png" alt="image-20200203105741240"></p><p>Instead of running that Material App, including all of those things there, I’m simply going to say runApp, and the app that we’re going to run is MyApp. So you can see that this hasn’t really changed our app at all, all it’s done is we’ve <u>separated out the part where we build our Material App into a separate widget</u>. And this is a stateless widget.</p><p>Now, what a stateless widget comes with is this method called <code>build</code>. And, this method gets called <strong>whenever we create a new version of this widget</strong>. That means that if I go ahead and change this color from teal to red, and I click on the ==Hot Reload== button, then it will go and check to see, what was the code that was changed most recently? Namely, teal became red. It will look to see where the closest build function is, and it will rerun it.</p><h1 id="Comparison-between-Hot-Reload-and-Hot-Restart"><a href="#Comparison-between-Hot-Reload-and-Hot-Restart" class="headerlink" title="Comparison between Hot Reload and Hot Restart"></a>Comparison between Hot Reload and Hot Restart</h1><p>The reason why hot reload can move over changes so quickly is that Hot Reload only checks the things changed but <strong>doesn’t</strong> change the state of your app. For example, if you type something in app, it will not be erased.</p><p>But Hot Restart in fact reset the state of your app. For example, the form or sth you typed will be reset.</p><p>Example:</p><p>一开始背景为red，在文本框输入Hello,然后将red改为purple，<br>点击<strong>Hot Reload</strong>，背景改变，文本不改变；<br>但点击<strong>Hot Restart</strong>,背景改变，文本框重置。</p><p><img src="/2020/02/04/Flutter-Introduction/image-20200203112350226.png" alt> <img src="/2020/02/04/Flutter-Introduction/image-20200203112032132.png" alt> <img src="/2020/02/04/Flutter-Introduction/image-20200203112054843.png" alt></p><h2 id="StateFulWidget和StatelessWidget"><a href="#StateFulWidget和StatelessWidget" class="headerlink" title="StateFulWidget和StatelessWidget"></a>StateFulWidget和StatelessWidget</h2><p><a href="https://www.jianshu.com/p/4178bbc2375e" target="_blank" rel="noopener">https://www.jianshu.com/p/4178bbc2375e</a></p><h2 id="Container-widgets"><a href="#Container-widgets" class="headerlink" title="Container widgets"></a>Container widgets</h2><p>It’s like <code>&lt;div&gt;</code> in HTML.</p><h3 id="Layout-behavior"><a href="#Layout-behavior" class="headerlink" title="Layout behavior"></a>Layout behavior</h3><p>Container with <strong>no children</strong> try to be as big as possible unless constraints are bounded.</p><p>If it has a child, container will shrinks to the size of the child widget.</p><p><img src="/2020/02/04/Flutter-Introduction/image-20200203152959890.png" alt></p><p>如何保证屏幕上的内容安全不受其他边框元素的影响比如顶部的工具条这里有时间，信号，刻痕?</p><p>这时候可以用到</p><h3 id="SafeArea-widget"><a href="#SafeArea-widget" class="headerlink" title="SafeArea widget"></a><strong>SafeArea widget</strong></h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        backgroundColor: Colors.blueAccent,</span><br><span class="line">        body: SafeArea(</span><br><span class="line">          child: Container(</span><br><span class="line">            color: Colors.white,</span><br><span class="line">            child: Text(<span class="string">'Hello'</span>),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需将Container widget放在SafeArea组件里面即可。效果如下<img src="/2020/02/04/Flutter-Introduction/image-20200205162625920.png" alt="image-20200205162625920"></p><p>当然，如果想要移动组件，可以用到</p><h3 id="EdgeInsets-Widget"><a href="#EdgeInsets-Widget" class="headerlink" title="EdgeInsets Widget"></a><a href="https://api.flutter.dev/flutter/painting/EdgeInsets-class.html" target="_blank" rel="noopener">EdgeInsets Widget</a></h3><blockquote><p>Typically used for an offset from each of the four sides of a box. For example, the padding inside a box can be represented using this class.</p></blockquote><p><strong>Usage</strong>:</p><p><u>此处我们以margin为例</u>，padding同理</p><p><code>EdgeInsets.all(double value)</code>: 上下左右的offset(偏移量都相同)，</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        backgroundColor: Colors.blueAccent,</span><br><span class="line">        body: SafeArea(</span><br><span class="line">          child: Container(</span><br><span class="line">            height: <span class="number">100.0</span>,</span><br><span class="line">            width: <span class="number">100.0</span>,</span><br><span class="line">            <span class="comment">// here</span></span><br><span class="line">            margin: EdgeInsets.all(<span class="number">20.0</span>),</span><br><span class="line">            <span class="comment">// here</span></span><br><span class="line">            color: Colors.white,</span><br><span class="line">            child: Text(<span class="string">'Hello'</span>),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>EdgeInsets.fromLTRB(double left, double top, double right, double bottom)</code>: 对上下左右指定不同的偏移量</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">margin: EdgeInsets.fromLTRB(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>),</span><br></pre></td></tr></table></figure><p><code>EdgeInsets.only({double left: 0.0, double top: 0.0, double right: 0.0, double bottom: 0.0})</code>: 仅对几个方向赋予偏移量</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">margin: EdgeInsets.only(left: <span class="number">20.0</span>),</span><br></pre></td></tr></table></figure><p><code>EdgeInsets.symmetric({double vertical: 0.0, double horizontal: 0.0})</code>: 创建对称的偏移量</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">margin: EdgeInsets.symmetric(vertical: <span class="number">29</span>),</span><br></pre></td></tr></table></figure><p>Keep in mind: Container is a <strong><a href="https://flutter.dev/docs/development/ui/widgets/layout#Single-child%20layout%20widgets" target="_blank" rel="noopener">single-child layout</a></strong> widgets, so it can only have <strong>one</strong> child at most</p><h1 id="Multi-child-layout-widgets"><a href="#Multi-child-layout-widgets" class="headerlink" title="Multi-child layout widgets"></a>Multi-child layout widgets</h1><h2 id="Columns-widget"><a href="#Columns-widget" class="headerlink" title="Columns() widget"></a>Columns() widget</h2><blockquote><p>因为是列，所以它会尽可能地多占用垂直空间。take up as much vertical space as possible</p><p><img src="/2020/02/04/Flutter-Introduction/image-20200203163126667.png" alt>可以在图中看到，虽然只有三个组 件，但是却占用了整整一列</p></blockquote><h3 id="mianAxisSize"><a href="#mianAxisSize" class="headerlink" title="mianAxisSize"></a>mianAxisSize</h3><blockquote><p>在分配空间之后，可能会有一些剩余的空闲空间。此值控制是否占用<strong>最大化或最小化</strong>空闲空间量</p></blockquote><p><strong>Usage:</strong></p><h4 id="MainAxisSize-min"><a href="#MainAxisSize-min" class="headerlink" title="MainAxisSize.min:"></a><code>MainAxisSize.min</code>:</h4><blockquote><p>占据最小空闲空间</p></blockquote><p><img src="/2020/02/04/Flutter-Introduction/image-20200203163828092.png" alt></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        backgroundColor: Colors.blueAccent,</span><br><span class="line">        body: SafeArea(</span><br><span class="line">          child: Column(</span><br><span class="line">            <span class="comment">// here</span></span><br><span class="line">            mainAxisSize: MainAxisSize.min,</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              Container(</span><br><span class="line">                height: <span class="number">100.0</span>,</span><br><span class="line">                width: <span class="number">100.0</span>,</span><br><span class="line">                color: Colors.white,</span><br><span class="line">                child: Text(<span class="string">'Container 1'</span>),</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                width: <span class="number">100</span>,</span><br><span class="line">                height: <span class="number">100.0</span>,</span><br><span class="line">                color: Colors.red,</span><br><span class="line">                child: Text(<span class="string">'Container 2'</span>),</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                width: <span class="number">100</span>,</span><br><span class="line">                height: <span class="number">100.0</span>,</span><br><span class="line">                color: Colors.pink,</span><br><span class="line">                child: Text(<span class="string">'Container 3'</span>),</span><br><span class="line">              ),</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="MainAxisSize-min-default"><a href="#MainAxisSize-min-default" class="headerlink" title="MainAxisSize.min (default)"></a><code>MainAxisSize.min</code> (default)</h4><blockquote><p>占用最大空闲空间</p></blockquote><p><img src="/2020/02/04/Flutter-Introduction/image-20200203163921666.png" alt></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mainAxisSize: MainAxisSize.max,</span><br></pre></td></tr></table></figure><p>如果我们想在竖直方向上改变排列顺序呢?</p><h3 id="verticalDirection"><a href="#verticalDirection" class="headerlink" title="verticalDirection"></a>verticalDirection</h3><h4 id="VerticalDirection-up"><a href="#VerticalDirection-up" class="headerlink" title="VerticalDirection.up:"></a><code>VerticalDirection.up</code>:</h4><blockquote><p>自下而上堆叠，The ‘start’ is at the bottom, the ‘end’ is at the top</p></blockquote><p><img src="/2020/02/04/Flutter-Introduction/image-20200203174639753.png" alt></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        backgroundColor: Colors.blueAccent,</span><br><span class="line">        body: SafeArea(</span><br><span class="line">          child: Column(</span><br><span class="line">            <span class="comment">// here</span></span><br><span class="line">            verticalDirection: VerticalDirection.up,</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              Container(</span><br><span class="line">                height: <span class="number">100.0</span>,</span><br><span class="line">                width: <span class="number">100.0</span>,</span><br><span class="line">                color: Colors.white,</span><br><span class="line">                child: Text(<span class="string">'Container 1'</span>),</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                width: <span class="number">100</span>,</span><br><span class="line">                height: <span class="number">100.0</span>,</span><br><span class="line">                color: Colors.red,</span><br><span class="line">                child: Text(<span class="string">'Container 2'</span>),</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                width: <span class="number">100</span>,</span><br><span class="line">                height: <span class="number">100.0</span>,</span><br><span class="line">                color: Colors.pink,</span><br><span class="line">                child: Text(<span class="string">'Container 3'</span>),</span><br><span class="line">              ),</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="VerticalDirection-down-default"><a href="#VerticalDirection-down-default" class="headerlink" title="VerticalDirection.down (default)"></a><code>VerticalDirection.down</code> (default)</h4><blockquote><p>自上而下堆叠，The ‘start’ is at the top, the ‘end’ is at the bottom</p></blockquote><p><img src="/2020/02/04/Flutter-Introduction/image-20200203174704288.png" alt></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">verticalDirection: VerticalDirection.down,</span><br></pre></td></tr></table></figure><hr><p>如果我们不想改变方向，指向改变不同组件之间的spacing间隔呢？</p><h4 id="mainAxisAlignment"><a href="#mainAxisAlignment" class="headerlink" title="mainAxisAlignment"></a>mainAxisAlignment</h4><h3 id="MainAxisAlignment-start-default"><a href="#MainAxisAlignment-start-default" class="headerlink" title="MainAxisAlignment.start (default)"></a><code>MainAxisAlignment.start</code> (default)</h3><blockquote><p>Place the children as close to the ==start== of the main axis as possible.</p></blockquote><p><img src="/2020/02/04/Flutter-Introduction/image-20200203175453304.png" alt></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        backgroundColor: Colors.blueAccent,</span><br><span class="line">        body: SafeArea(</span><br><span class="line">          child: Column(</span><br><span class="line">            <span class="comment">// here</span></span><br><span class="line">            mainAxisAlignment: MainAxisAlignment.start,</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              Container(</span><br><span class="line">                height: <span class="number">100.0</span>,</span><br><span class="line">                width: <span class="number">100.0</span>,</span><br><span class="line">                color: Colors.white,</span><br><span class="line">                child: Text(<span class="string">'Container 1'</span>),</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                width: <span class="number">100</span>,</span><br><span class="line">                height: <span class="number">100.0</span>,</span><br><span class="line">                color: Colors.red,</span><br><span class="line">                child: Text(<span class="string">'Container 2'</span>),</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                width: <span class="number">100</span>,</span><br><span class="line">                height: <span class="number">100.0</span>,</span><br><span class="line">                color: Colors.pink,</span><br><span class="line">                child: Text(<span class="string">'Container 3'</span>),</span><br><span class="line">              ),</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="MainAxisAlignment-end"><a href="#MainAxisAlignment-end" class="headerlink" title="MainAxisAlignment.end"></a><code>MainAxisAlignment.end</code></h4><blockquote><p>Place the children as close to the end of the main axis as possible.</p></blockquote><p>Tip: 与<code>VerticalDeriction.down</code>的区别，<code>down</code>不仅会将子组件放置在column的底部，而且会<strong>change their order</strong>.</p><p><img src="/2020/02/04/Flutter-Introduction/image-20200203175530730-1580805908363.png" alt="image-20200203175530730"></p><h4 id="MainAxisAlignment-center"><a href="#MainAxisAlignment-center" class="headerlink" title="MainAxisAlignment.center"></a><code>MainAxisAlignment.center</code></h4><blockquote><p>Place the children as close to the <strong>middle</strong> of the main axis as possible</p></blockquote><p><img src="/2020/02/04/Flutter-Introduction/image-20200203180017152.png" alt></p><h4 id="MainAxisAlignment-sapceEvenly"><a href="#MainAxisAlignment-sapceEvenly" class="headerlink" title="MainAxisAlignment.sapceEvenly"></a><code>MainAxisAlignment.sapceEvenly</code></h4><blockquote><p>calculate the free space evenly and place it between the children as well as <strong>before and after first and last child</strong></p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        backgroundColor: Colors.blueAccent,</span><br><span class="line">        body: SafeArea(</span><br><span class="line">          child: Column(</span><br><span class="line">            <span class="comment">// here</span></span><br><span class="line">            mainAxisAlignment: MainAxisAlignment.spaceEvenly,</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              Container(</span><br><span class="line">                height: <span class="number">100.0</span>,</span><br><span class="line">                width: <span class="number">100.0</span>,</span><br><span class="line">                color: Colors.white,</span><br><span class="line">                child: Text(<span class="string">'Container 1'</span>),</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                width: <span class="number">100</span>,</span><br><span class="line">                height: <span class="number">100.0</span>,</span><br><span class="line">                color: Colors.red,</span><br><span class="line">                child: Text(<span class="string">'Container 2'</span>),</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                width: <span class="number">100</span>,</span><br><span class="line">                height: <span class="number">100.0</span>,</span><br><span class="line">                color: Colors.pink,</span><br><span class="line">                child: Text(<span class="string">'Container 3'</span>),</span><br><span class="line">              ),</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/02/04/Flutter-Introduction/image-20200203180429702.png" alt></p><h4 id="MainAxisAlignment-spaceBetween"><a href="#MainAxisAlignment-spaceBetween" class="headerlink" title="MainAxisAlignment.spaceBetween"></a><code>MainAxisAlignment.spaceBetween</code></h4><blockquote><p>与Evenly的唯一区别就是不包含第一和最后一个子组件</p></blockquote><p><img src="/2020/02/04/Flutter-Introduction/image-20200203180658412.png" alt></p><hr><p>How the children should be placed along the cross axis？子组件们应该如何沿横轴摆放？比方说，Column widget在横轴(horizontally)如何对齐</p><h3 id="crossAxisAlignment"><a href="#crossAxisAlignment" class="headerlink" title="crossAxisAlignment"></a>crossAxisAlignment</h3><p>==Attention==: 这个性质起作用的前提是多个组件长宽<strong>不一样</strong></p><h4 id="CrossAxisAlignment-center-default"><a href="#CrossAxisAlignment-center-default" class="headerlink" title="CrossAxisAlignment.center (default)"></a><code>CrossAxisAlignment.center</code> (default)</h4><blockquote><p>Place the children so that their centers align with the <u>middle of the cross axis</u>.</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        backgroundColor: Colors.blueAccent,</span><br><span class="line">        body: SafeArea(</span><br><span class="line">          child: Column(</span><br><span class="line">            <span class="comment">// here</span></span><br><span class="line">            crossAxisAlignment: CrossAxisAlignment.center,</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              Container(</span><br><span class="line">                height: <span class="number">100.0</span>,</span><br><span class="line">                width: <span class="number">200.0</span>,</span><br><span class="line">                color: Colors.white,</span><br><span class="line">                child: Text(<span class="string">'Container 1'</span>),</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                width: <span class="number">100</span>,</span><br><span class="line">                height: <span class="number">100.0</span>,</span><br><span class="line">                color: Colors.red,</span><br><span class="line">                child: Text(<span class="string">'Container 2'</span>),</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                width: <span class="number">100</span>,</span><br><span class="line">                height: <span class="number">100.0</span>,</span><br><span class="line">                color: Colors.pink,</span><br><span class="line">                child: Text(<span class="string">'Container 3'</span>),</span><br><span class="line">              ),</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/02/04/Flutter-Introduction/image-20200203181245499.png" alt></p><h4 id="CrossAxisAlignment-end"><a href="#CrossAxisAlignment-end" class="headerlink" title="CrossAxisAlignment.end"></a><code>CrossAxisAlignment.end</code></h4><blockquote><p>根据右边的轴对齐。Place the children as close to the end of the cross axis as possible.</p></blockquote><p><img src="/2020/02/04/Flutter-Introduction/image-20200203181450209.png" alt></p><h4 id="CrossAxisAlignment-start"><a href="#CrossAxisAlignment-start" class="headerlink" title="CrossAxisAlignment.start"></a><code>CrossAxisAlignment.start</code></h4><blockquote><p>根据左边的轴对齐</p></blockquote><p><img src="/2020/02/04/Flutter-Introduction/image-20200203181533296.png" alt></p><hr><p>但是，如果你想使这些组件靠在手机屏幕右侧,该怎么办呢？</p><h3 id="Strategy"><a href="#Strategy" class="headerlink" title="==Strategy=="></a>==Strategy==</h3><p>我们可以再创建一个子组件，使他不可见，但却拥有无限宽度</p><p><img src="/2020/02/04/Flutter-Introduction/image-20200203182218002.png" alt></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        backgroundColor: Colors.blueAccent,</span><br><span class="line">        body: SafeArea(</span><br><span class="line">          child: Column(</span><br><span class="line">            crossAxisAlignment: CrossAxisAlignment.end,</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              Container(</span><br><span class="line">                height: <span class="number">100.0</span>,</span><br><span class="line">                width: <span class="number">100.0</span>,</span><br><span class="line">                color: Colors.white,</span><br><span class="line">                child: Text(<span class="string">'Container 1'</span>),</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                width: <span class="number">100</span>,</span><br><span class="line">                height: <span class="number">100.0</span>,</span><br><span class="line">                color: Colors.red,</span><br><span class="line">                child: Text(<span class="string">'Container 2'</span>),</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                width: <span class="number">100</span>,</span><br><span class="line">                height: <span class="number">100.0</span>,</span><br><span class="line">                color: Colors.pink,</span><br><span class="line">                child: Text(<span class="string">'Container 3'</span>),</span><br><span class="line">              ),</span><br><span class="line">              <span class="comment">// 灵魂之处！</span></span><br><span class="line">              Container(</span><br><span class="line">                width: <span class="built_in">double</span>.infinity,</span><br><span class="line">              )</span><br><span class="line">              <span class="comment">// 灵魂之处</span></span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>Now, what if, you wanted actually to stretch all your containers so that they fill the entire width? 想拉伸所有的容器，使它们能填满整个宽度？</p><p>方法一，将所有容器的width改为``double.infinity`</p><p>方法二，</p><h4 id="CrossAxisAlignment-stretch"><a href="#CrossAxisAlignment-stretch" class="headerlink" title="CrossAxisAlignment.stretch"></a><code>CrossAxisAlignment.stretch</code></h4><p><img src="/2020/02/04/Flutter-Introduction/image-20200203184812125.png" alt></p><hr><p>如果想要在每个组件之间增加指定间距呢？</p><h3 id="Strategy-1"><a href="#Strategy-1" class="headerlink" title="==Strategy=="></a>==Strategy==</h3><h4 id="SizeBox"><a href="#SizeBox" class="headerlink" title="SizeBox"></a><code>SizeBox</code></h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        backgroundColor: Colors.blueAccent,</span><br><span class="line">        body: SafeArea(</span><br><span class="line">          child: Column(</span><br><span class="line">            crossAxisAlignment: CrossAxisAlignment.stretch,</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              Container(</span><br><span class="line">                height: <span class="number">100.0</span>,</span><br><span class="line">                width: <span class="number">100.0</span>,</span><br><span class="line">                color: Colors.white,</span><br><span class="line">                child: Text(<span class="string">'Container 1'</span>),</span><br><span class="line">              ),</span><br><span class="line">              <span class="comment">// here</span></span><br><span class="line">              SizedBox(</span><br><span class="line">                height: <span class="number">20</span>,</span><br><span class="line">              ),</span><br><span class="line">              <span class="comment">// here</span></span><br><span class="line">              Container(</span><br><span class="line">                width: <span class="number">100</span>,</span><br><span class="line">                height: <span class="number">100.0</span>,</span><br><span class="line">                color: Colors.red,</span><br><span class="line">                child: Text(<span class="string">'Container 2'</span>),</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                width: <span class="number">100</span>,</span><br><span class="line">                height: <span class="number">100.0</span>,</span><br><span class="line">                color: Colors.pink,</span><br><span class="line">                child: Text(<span class="string">'Container 3'</span>),</span><br><span class="line">              ),</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/02/04/Flutter-Introduction/image-20200203185040436.png" alt></p><h2 id="Rows-widget"><a href="#Rows-widget" class="headerlink" title="Rows() widget"></a>Rows() widget</h2><p>这些同样适用于Row!~</p><p><a href="https://medium.com/flutter-community/flutter-layout-cheat-sheet-5363348d037e" target="_blank" rel="noopener">Cheat sheet</a></p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Widgets </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>float在内存中的表示</title>
      <link href="/2020/02/04/float%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E8%A1%A8%E7%A4%BA/"/>
      <url>/2020/02/04/float%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E8%A1%A8%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="Float在内存中的表示"><a href="#Float在内存中的表示" class="headerlink" title="Float在内存中的表示"></a>Float在内存中的表示</h1><p>Float型，俗称浮点型，在C中占4 个bytes（字节）。</p><p>按照 <a href="https://en.wikipedia.org/wiki/IEEE_754" target="_blank" rel="noopener">IEEE754</a> 标准,在计算机中的存储格式如下：</p><p><img src="/2020/02/04/float%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E8%A1%A8%E7%A4%BA/image-20200203232515753.png" alt></p><p>公式为N= (-1)<sup>Sign</sup> ×(1.Mantissa) × 2<sup>(Exponent-127)</sup></p><a id="more"></a><p>分别由符号位、指数位（阶码）和小数位(Mantissa)组成，分别占1、8和23位bits。</p><blockquote><p>忘说了，因为都是把1作为整数部分，所以就不在内存中表示，但默认其整数位为<strong>1</strong></p></blockquote><h2 id="那大家也应该和我一样，困惑为什么阶码的范围是1-254呢？"><a href="#那大家也应该和我一样，困惑为什么阶码的范围是1-254呢？" class="headerlink" title="那大家也应该和我一样，困惑为什么阶码的范围是1~254呢？"></a>那大家也应该和我一样，困惑为什么阶码的范围是<span style="background:#ff0">1~254</span>呢？</h2><p>首先，八位数应该就有2^8^，256种可能性，但因为要从0开始，所以是0~255。<strong>但是</strong>，IEEE754把<code>0</code>和<code>255</code>归类到<u>次正规数(Denormalized/subnormal number)</u>和<u>无穷大</u>去啦，所以我们能用来正常表示的只有1~254种可能性了。</p><p>次正规数：如果<span style="background:#ff0">指数都为0</span>，则不管小树部分为多少，都说他们是次正规数</p><p>举个例子：</p><p><img src="/2020/02/04/float%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E8%A1%A8%E7%A4%BA/image-20200203234554930.png" alt="image-20200203234554930"></p><p>小数位(.11)<sub>b</sub>=2<sup>-1</sup>+2<sup>-2</sup>=0.75;</p><p>指数为e=0, e-127=-127;</p><p>则该浮点数为 1.75×2<sup>-127</sup> = 0.75×2<sup>-126</sup></p><h2 id="为什么表示时指数部分是2的E-127次方呢？"><a href="#为什么表示时指数部分是2的E-127次方呢？" class="headerlink" title="为什么表示时指数部分是2的E-127次方呢？"></a>为什么表示时指数部分是2的E-127次方呢？</h2><blockquote><p>通常我们称此处的127为<strong>偏移量</strong>(bias)</p></blockquote><p>因为IEEE为了不在阶码中引入符号位，所以加入偏移量。不然1~254只能表示指数大于0 的部分，那对小于0的部分不就不公平了嘛。</p><p>所以引入偏移量127，这样E-127= <strong>[-126,127]</strong>，就可以表示指数为负的部分啦~~</p><p>那为什么是127呢？很简单，因为254/2=127！是不是很简单就能像明白？奥利给！</p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
          <category> Memory </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> Float </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/01/22/hello-world/"/>
      <url>/2020/01/22/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><h3 id="图片大小设置"><a href="#图片大小设置" class="headerlink" title="图片大小设置"></a>图片大小设置</h3><img src="/2020/01/22/hello-world/xxxxx.png" width="40%" title="xxxx" alt="xxx">]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
